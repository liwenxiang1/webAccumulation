"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[3508],{844:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>w,data:()=>j});var t=a(641);const p=(0,t.Fv)('<h1 id="vue-开发技巧" tabindex="-1"><a class="header-anchor" href="#vue-开发技巧"><span>Vue 开发技巧</span></a></h1><h2 id="文章内容总结" tabindex="-1"><a class="header-anchor" href="#文章内容总结"><span>文章内容总结:</span></a></h2><ol><li>组件 style 的 scoped</li><li>Vue 数组/对象更新 视图不更新</li><li>vue filters 过滤器的使用</li><li>列表渲染相关</li><li>深度 watch 与 watch 立即触发回调</li><li>这些情况下不要使用箭头函数</li><li>路由懒加载写法</li><li>路由的项目启动页和 404 页面</li><li>Vue 调试神器:vue-devtools</li></ol><h2 id="组件-style-的-scoped" tabindex="-1"><a class="header-anchor" href="#组件-style-的-scoped"><span>组件 style 的 scoped:</span></a></h2><blockquote><p>问题：在组件中用 js 动态创建的 dom，添加样式不生效。</p></blockquote><p><strong>场景:</strong></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> newDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建dom</span>\n  newDom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;testAdd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加样式</span>\n  a<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newDom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入dom</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.test</span> <span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token selector">.testAdd</span> <span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><blockquote><p>// test 生效 testAdd 不生效</p></blockquote><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-v-1b971ada</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>testAdd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.test[data-v-1b971ada]</span> <span class="token punctuation">{</span>\n  // 注意data-v-1b971ada\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因:</strong></p><p>当 <code>&lt;style&gt;</code> 标签有 <code>scoped</code> 属性时，它的 CSS 只作用于当前组件中的元素。</p><p>它会为组件中所有的标签和 <code>class</code> 样式添加一个 <code>scoped</code> 标识，就像上面结果中的 data-v-1b971ada。</p><p>所以原因就很清楚了：因为动态添加的 dom 没有 scoped 添加的标识，没有跟 testAdd 的样式匹配起来，导致样式失效。</p><p><strong>解决方式:</strong></p><ul><li>推荐：去掉该组件的 scoped</li><li>每个组件的 css 并不会很多，当设计到动态添加 dom，并为 dom 添加样式的时候，就可以去掉 scoped，会比下面的方法方便很多。</li></ul><h2 id="vue-数组-对象更新-视图不更新" tabindex="-1"><a class="header-anchor" href="#vue-数组-对象更新-视图不更新"><span>Vue 数组/对象更新 视图不更新</span></a></h2><p>很多时候，我们习惯于这样操作数组和对象:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// data数据</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 数据更新 数组视图不更新</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;OBKoro1&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;OBKoro1&#39;];</span>\n<span class="token comment">// 数据更新 对象视图不更新</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">&#39;OBKoro1&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {b:2,c:&#39;OBKoro1&#39;}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 js 的限制，Vue 不能检测以上数组的变动，以及对象的添加/删除，很多人会因为像上面这样操作，出现视图没有更新的问题。</p><p><strong>解决方式:</strong></p><ol><li>this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么 value)</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;OBKoro1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 改变数组</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;OBKoro1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 改变对象</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>数组原生方法触发视图更新: Vue 可以监测到数组变化的，数组原生方法:</li></ol><p><code>splice()</code> 、 <code>push()</code> 、 <code>pop()</code> 、 <code>shift()</code> 、 <code>unshift()</code> 、 <code>sort()</code> 、 <code>reverse()</code></p><p><strong>意思是使用这些方法不用我们再进行额外的操作，视图自动进行更新。</strong></p>',27),e=(0,t.Lk)("code",null,"splice",-1),o=(0,t.Lk)("code",null,"slice",-1),c={href:"https://juejin.cn/post/6844903614918459406?utm_source=gold_browser_extension#heading-7",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Fv)('<ol start="3"><li>替换数组/对象 比方说: 你想遍历这个数组/对象，对每个元素进行处理，然后触发视图更新。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 文档中的栗子: filter 遍历数组，返回一个新数组，用新数组替换旧数组</span>\nexample1<span class="token punctuation">.</span>items <span class="token operator">=</span> example1<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> item<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Foo</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>举一反三：</strong> 可以先把这个数组/对象保存在一个变量中，然后对这个变量进行遍历，等遍历结束后再用 <strong>变量替换对象/数组</strong>。</p><p><strong>并不会重新渲染整个列表:</strong></p><p>Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的、启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p>',5),i={href:"https://v2.cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Fv)('<h2 id="vue-filters-过滤器的使用" tabindex="-1"><a class="header-anchor" href="#vue-filters-过滤器的使用"><span>vue filters 过滤器的使用:</span></a></h2><p>过滤器，通常用于后台管理系统，或者一些约定类型，过滤。Vue 过滤器用法是很简单，但是很多朋友可能都没有用过，这里稍微讲解一下。</p><p>在 html 模板中的两种用法：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 在双花括号中 --&gt;</span>\n{{ message | filterTest }}\n<span class="token comment">&lt;!-- 在 `v-bind` 中 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message | filterTest<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在组件 script 中的用法:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">filterTest</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// value在这里是message的值</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&#39;最后输出这个值&#39;</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法就是上面讲的这样，可以自己在组件中试一试就知道了，很简单很好用的。</p>',7),r={href:"https://v2.cn.vuejs.org/v2/guide/filters.html",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Fv)('<h2 id="列表渲染相关" tabindex="-1"><a class="header-anchor" href="#列表渲染相关"><span>列表渲染相关</span></a></h2><p><code>v-for</code> 循环绑定 <code>model</code> :</p><p><code>input</code> 在 <code>v-for</code> 中可以像如下这么进行绑定，我敢打赌很多人不知道。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 数据</span>\n<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">ob</span><span class="token operator">:</span> <span class="token string">&quot;OB&quot;</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">koro1</span><span class="token operator">:</span> <span class="token string">&quot;Koro1&quot;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">ob</span><span class="token operator">:</span> <span class="token string">&quot;默认ob&quot;</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">koro1</span><span class="token operator">:</span> <span class="token string">&quot;默认koro1&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// html模板</span>\n    <span class="token operator">&lt;</span>\n    div v <span class="token operator">-</span>\n    <span class="token keyword">for</span> <span class="token operator">=</span> <span class="token string">&quot;(value,key) in obj&quot;</span> <span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>\n    input type <span class="token operator">=</span> <span class="token string">&quot;text&quot;</span>\nv <span class="token operator">-</span> model <span class="token operator">=</span> <span class="token string">&quot;model[key]&quot;</span> <span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>\n    <span class="token operator">/</span>div<span class="token operator">&gt;</span>\n\n<span class="token comment">// input 就跟数据绑定在一起了，那两个默认数据也会在 input 中显示</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>一段取值的 v-for</strong></p><p>如果我们有一段重复的 html 模板要渲染，又没有数据关联，我们可以:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>n in 5<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>这里会被渲染5次，渲染模板{{n}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>v-if 尽量不要与 v-for 在同一节点使用:</strong></p><p><code>v-for</code> 的优先级比 <code>v-if</code> 更高, 如果它们处于同一节点的话，那么每一个循环都会运行一遍 <code>v-if</code> 。</p><p>如果你想根据循环中的每一项的数据来判断是否渲染，那么你这样做是对的:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo in todos<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo.type===1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ todo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想要根据<strong>某些条件跳过循环，而又跟将要渲染的每一项数据没有关系的话，你可以将 v-if 放在 v-for 的父节点：</strong></p><p>// 根据 elseData 是否为 true 来判断是否渲染，跟每个元素没有关系</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elseData<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo in todos<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ todo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n// 数组是否有数据 跟每个元素没有关系\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todos.length<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo in todos<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ todo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>No todos left!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，正确使用 <code>v-for</code> 与 <code>v-if</code> 优先级的关系，可以为你节省大量的性能</p><h2 id="深度-watch-与-watch-立即触发回调" tabindex="-1"><a class="header-anchor" href="#深度-watch-与-watch-立即触发回调"><span>深度 watch 与 watch 立即触发回调</span></a></h2><p><code>watch</code> 很多人都在用，但是这<code> watch</code> 中的这两个选项<code>deep</code>、<code>immediate</code>，或许不是很多人都知道，我猜。</p><p><strong>选项：deep</strong></p><p>在选项参数中指定 deep: true，可以监听对象中属性的变化。</p><p><strong>选项：immediate</strong></p><p>在选项参数中指定 <code>immediate: true</code>, 将立即以表达式的当前值触发回调，也就是立即触发一次。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n<span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n<span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;属性发生变化触发这个回调&#39;</span><span class="token punctuation">,</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 监听这个对象中的每一个属性变化</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token literal-property property">step</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 属性</span>\n<span class="token comment">//watch</span>\n<span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;默认立即触发一次&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 默认立即触发一次</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="这些情况下不要使用箭头函数" tabindex="-1"><a class="header-anchor" href="#这些情况下不要使用箭头函数"><span>这些情况下不要使用箭头函数:</span></a></h2><ul><li>不应该使用箭头函数来定义一个生命周期方法</li><li>不应该使用箭头函数来定义 method 函数</li><li>不应该使用箭头函数来定义计算属性函数</li><li>不应该对 data 属性使用箭头函数</li><li>不应该使用箭头函数来定义 watcher 函数</li></ul><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 上面 watch 的栗子：</span>\n<span class="token function-variable function">handler</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 可以执行</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;默认触发一次&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token comment">// method：</span>\n<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n<span class="token function-variable function">plus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 可以执行</span>\n<span class="token comment">// do something</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 生命周期:</span>\n<span class="token function-variable function">created</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">// 可以执行</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;lala&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是的，没错，这些都能执行。</p><p>but:</p><p>箭头函数绑定了父级作用域的上下文，<strong>this 将不会按照期望指向 Vue 实例</strong>。</p><p>也就是说，<strong>你不能使用 this 来访问你组件中的 data 数据以及 method 方法了</strong>。</p><p>this 将会指向 undefined</p><h2 id="路由懒加载写法" tabindex="-1"><a class="header-anchor" href="#路由懒加载写法"><span>路由懒加载写法:</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 我所采用的方法，个人感觉比较简洁一些，少了一步引入赋值。</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/app&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 引入组件</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// Vue路由文档的写法:</span>\n<span class="token keyword">const</span> <span class="token function-variable function">app</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./app.vue&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 引入组件</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/app&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> app <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文档的写法在于问题在于：如果我们的路由比较多的话，是不是要在路由上方引入赋值十几行组件？</p><p>第一种跟第二种方法相比就是把引入赋值的一步，直接写在 <code>component</code> 上面，本质上是一样的。两种方式都可以的，大家自由选择哈。</p><h2 id="路由的项目启动页和-404-页面" tabindex="-1"><a class="header-anchor" href="#路由的项目启动页和-404-页面"><span>路由的项目启动页和 404 页面</span></a></h2><p>实际上这也就是一个设置而已:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 项目启动页</span>\n      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 重定向到下方声明的路由</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 404 页面</span>\n      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./notFind&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 或者使用component也可以的</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如你的域名为:<code>www.baidu.com</code></p><p>项目启动页指的是: 当你进入<code>www.baidu.com</code>，会自动跳转到 <code>login</code> 登录页。</p><p>404 页面指的是: 当进入一个没有 声明/没有匹配 的路由页面时就会跳转到 404 页面。</p><p>比如进入<code>www.baidu.com/testRouter</code>,就会自动跳转到<code>notFind</code>页面。</p><p>当你没有声明一个 404 页面，进入<code>www.baidu.com/testRouter</code>，显示的页面是一片空白。</p><h2 id="vue-调试神器-vue-devtools" tabindex="-1"><a class="header-anchor" href="#vue-调试神器-vue-devtools"><span>Vue 调试神器:vue-devtools</span></a></h2><p>每次调试的时候，写一堆<code>console</code>是否很烦？想要更快知道组件<code>Vuex</code> 内数据的变化？</p><p>那么这款尤大开发的调试神器:<strong>vue-devtools</strong>，你真的要了解一下了。</p><p>这波稳赚不赔，真的能提高开发效率。</p><p><strong>安装方法：</strong></p><p>谷歌商店+科学上网,搜索 <strong>vue-devtools</strong> 即可安装。 <strong>安装之后：</strong></p><p>在 <code>chrome</code> 开发者工具中会看一个 <code>vue</code> 的一栏，如下对我们网页应用内数据变化，组件层级等信息能够有更准确快速的了解。</p><h2 id="路由变化页面数据不刷新问题" tabindex="-1"><a class="header-anchor" href="#路由变化页面数据不刷新问题"><span>路由变化页面数据不刷新问题</span></a></h2><p>场景：比如文章详情数据，依赖路由的 <code>params</code> 参数获取的(<code>ajax</code> 写在 <code>created </code>生命周期里面)，因为路由懒加载的关系，退出页面再进入另一个文章页面并不会运行 <code>created</code> 组件生命周期，导致文章数据还是上一个文章的数据。</p><p>解决方法：watch 监听路由是否变化</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>     <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">&#39;$route&#39;</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 监听路由是否变化</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>articleId<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 是否有文章id</span>\n          <span class="token comment">// 获取文章数据</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="settimeout-setinterval-无法用-this-访问-vue-实例" tabindex="-1"><a class="header-anchor" href="#settimeout-setinterval-无法用-this-访问-vue-实例"><span>setTimeout/setInterval 无法用 this 访问 VUe 实例</span></a></h2><p><strong>场景：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// this指向改变</span>\n            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// setInterval同理</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时this指向Window对象</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方法：使用箭头函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 箭头函数访问 this 实例</span>\n<span class="token comment">// 因为箭头函数本身没有绑定 this 继承上一个不是箭头函数的函数的 this</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 使用变量保存 this 指向 通过变量访问 this 实例</span>\n<span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 self 变量访问 this 实例</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="setinterval-路由跳转继续运行并没有销毁" tabindex="-1"><a class="header-anchor" href="#setinterval-路由跳转继续运行并没有销毁"><span>setInterval 路由跳转继续运行并没有销毁</span></a></h2><p><strong>场景：</strong></p><p>比如一些弹幕，走马灯文字，这类需要定时调用的，路由跳转之后，因为组件已经销毁了，但是 <code>setInterval</code> 还没有销毁，还在继续后台调用，控制台会不断报错，如果运算量大的话，无法及时清除，会导致严重的页面卡顿。</p><p><strong>解决办法：在组件生命周期 beforeDestroy 停止 setInterval</strong></p><p>组件销毁前执行的钩子函数，跟其他生命周期钩子函数的用法相同。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//我通常是把setInterval()定时器赋值给this实例，然后就可以像下面这么暂停。</span>\n   <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intervalid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue-滚动行为-浏览器回退记忆位置-用法" tabindex="-1"><a class="header-anchor" href="#vue-滚动行为-浏览器回退记忆位置-用法"><span>vue 滚动行为(浏览器回退记忆位置)用法</span></a></h2><p>这个我当时做的时候以为很难，后来做好了才发现就是一个设置而已（前提是要开启路由的 <code>History</code> 模式），下面做一个简单的分享。</p><p><strong>路由设置</strong></p><p>要使用这一功能，首先需要开启 <code>vue-router</code> 的 <code>history</code> 模式 如果之前一直使用的是 hash 模式(默认模式)，项目已经开发了一段时间，然后转 <code>history</code> 模式很可能会遇到：这些问题</p><p>滚动行为具体设置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>        <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;history&#39;</span><span class="token punctuation">,</span>\n        <span class="token function">scrollBehavior</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> savedPosition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果savedPosition存在，滚动条会自动跳到记录的值的地方</span>\n              <span class="token keyword">return</span> savedPosition\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token comment">// savedPosition也是一个记录x轴和y轴位置的对象</span>\n             <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>，\n          <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',71),k={href:"https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Fv)('<h2 id="vue-路由拦截浏览器后退实现草稿保存类似需求" tabindex="-1"><a class="header-anchor" href="#vue-路由拦截浏览器后退实现草稿保存类似需求"><span>vue 路由拦截浏览器后退实现草稿保存类似需求</span></a></h2><p><strong>场景：</strong></p><p>为了防止用户突然离开，没有保存已输入的信息。</p><p><strong>用法：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>    <span class="token comment">//在路由组件中：</span>\n    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>用户已经输入信息<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 出现弹窗提醒保存草稿，或者自动后台为其保存</span>\n      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用户离开</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),m=(0,t.Lk)("code",null,"beforeEach",-1),g=(0,t.Lk)("code",null,"beforeRouteUpdate",-1),b={href:"https://router.vuejs.org/zh-cn/advanced/navigation-guards.html",target:"_blank",rel:"noopener noreferrer"},h=(0,t.Fv)('<h2 id="v-once-只渲染元素和组件一次-优化更新渲染性能" tabindex="-1"><a class="header-anchor" href="#v-once-只渲染元素和组件一次-优化更新渲染性能"><span>v-once 只渲染元素和组件一次，优化更新渲染性能</span></a></h2><p>觉得<code>v-once</code>这个 <code>api</code> 蛮 6 的，应该很多小伙伴都没有注意到这个 <code>api</code>。</p><p><strong>文档介绍：</strong></p><p><code>v-once</code> 文档介绍</p><p>这个 <code>api</code> 在我看来主要用于那些一次性渲染，并且不会再有操作更改这些渲染的值，这样就可以优化双向绑定的更新性能。</p><p>文档推荐：对低开销的静态组件使用 <code>v-once</code></p><p>尽管在 <code>Vue</code> 中渲染 <code>HTML</code> 很快，不过当组件中包含大量静态内容时，可以考虑使用 <code>v-once</code> 将渲染结果缓存起来，就像这样：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>Vue.component(&#39;terms-of-service&#39;, { template: &#39;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Terms of Service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  ...很多静态内容...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n&#39; })\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8),y={href:"https://juejin.cn/post/6844903555602612231",target:"_blank",rel:"noopener noreferrer"},f={},w=(0,a(6262).A)(f,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[p,(0,t.Lk)("p",null,[(0,t.eW)("推荐使用 "),e,(0,t.eW)(" 方法会比较好自定义, 因为 "),o,(0,t.eW)(" 可以在数组的任何位置进行删除/添加操作，这部分可以看看:"),(0,t.Lk)("a",c,[(0,t.eW)("【干货】js 数组详细操作方法及解析合集"),(0,t.bF)(a)])]),l,(0,t.Lk)("p",null,[(0,t.eW)("如果你还是很困惑，可以看看 "),(0,t.Lk)("a",i,[(0,t.eW)("Vue 文档"),(0,t.bF)(a)]),(0,t.eW)("中关于这部分的解释。")]),u,(0,t.Lk)("p",null,[(0,t.eW)("推荐看 "),(0,t.Lk)("a",r,[(0,t.eW)("Vue 过滤器文档"),(0,t.bF)(a)]),(0,t.eW)("，你会更了解它的。")]),d,(0,t.Lk)("p",null,[(0,t.Lk)("a",k,[(0,t.eW)("vue 滚动行为文档"),(0,t.bF)(a)]),(0,t.eW)("，可以进到这里看看更详细的信息。")]),v,(0,t.Lk)("p",null,[(0,t.eW)("类似的还有 "),m,(0,t.eW)("、"),g,(0,t.eW)("，也分为全局钩子和组件钩子，见"),(0,t.Lk)("a",b,[(0,t.eW)("路由文档"),(0,t.bF)(a)]),(0,t.eW)("。")]),h,(0,t.Lk)("p",null,[(0,t.Lk)("a",y,[(0,t.eW)("另一篇相似文档"),(0,t.bF)(a)])])])}]]),j=JSON.parse('{"path":"/utils/Vue%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7.html","title":"Vue 开发技巧","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"文章内容总结:","slug":"文章内容总结","link":"#文章内容总结","children":[]},{"level":2,"title":"组件 style 的 scoped:","slug":"组件-style-的-scoped","link":"#组件-style-的-scoped","children":[]},{"level":2,"title":"Vue 数组/对象更新 视图不更新","slug":"vue-数组-对象更新-视图不更新","link":"#vue-数组-对象更新-视图不更新","children":[]},{"level":2,"title":"vue filters 过滤器的使用:","slug":"vue-filters-过滤器的使用","link":"#vue-filters-过滤器的使用","children":[]},{"level":2,"title":"列表渲染相关","slug":"列表渲染相关","link":"#列表渲染相关","children":[]},{"level":2,"title":"深度 watch 与 watch 立即触发回调","slug":"深度-watch-与-watch-立即触发回调","link":"#深度-watch-与-watch-立即触发回调","children":[]},{"level":2,"title":"这些情况下不要使用箭头函数:","slug":"这些情况下不要使用箭头函数","link":"#这些情况下不要使用箭头函数","children":[]},{"level":2,"title":"路由懒加载写法:","slug":"路由懒加载写法","link":"#路由懒加载写法","children":[]},{"level":2,"title":"路由的项目启动页和 404 页面","slug":"路由的项目启动页和-404-页面","link":"#路由的项目启动页和-404-页面","children":[]},{"level":2,"title":"Vue 调试神器:vue-devtools","slug":"vue-调试神器-vue-devtools","link":"#vue-调试神器-vue-devtools","children":[]},{"level":2,"title":"路由变化页面数据不刷新问题","slug":"路由变化页面数据不刷新问题","link":"#路由变化页面数据不刷新问题","children":[]},{"level":2,"title":"setTimeout/setInterval 无法用 this 访问 VUe 实例","slug":"settimeout-setinterval-无法用-this-访问-vue-实例","link":"#settimeout-setinterval-无法用-this-访问-vue-实例","children":[]},{"level":2,"title":"setInterval 路由跳转继续运行并没有销毁","slug":"setinterval-路由跳转继续运行并没有销毁","link":"#setinterval-路由跳转继续运行并没有销毁","children":[]},{"level":2,"title":"vue 滚动行为(浏览器回退记忆位置)用法","slug":"vue-滚动行为-浏览器回退记忆位置-用法","link":"#vue-滚动行为-浏览器回退记忆位置-用法","children":[]},{"level":2,"title":"vue 路由拦截浏览器后退实现草稿保存类似需求","slug":"vue-路由拦截浏览器后退实现草稿保存类似需求","link":"#vue-路由拦截浏览器后退实现草稿保存类似需求","children":[]},{"level":2,"title":"v-once 只渲染元素和组件一次，优化更新渲染性能","slug":"v-once-只渲染元素和组件一次-优化更新渲染性能","link":"#v-once-只渲染元素和组件一次-优化更新渲染性能","children":[]}],"git":{},"filePathRelative":"utils/Vue开发技巧.md"}')}}]);