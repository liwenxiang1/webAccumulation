"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[8309],{757:(e,d,i)=>{i.r(d),i.d(d,{comp:()=>a,data:()=>s});var n=i(641);const t=[(0,n.Fv)('<h1 id="查询文档" tabindex="-1"><a class="header-anchor" href="#查询文档"><span>查询文档</span></a></h1><p>支持 <code>where()</code>、<code>limit()</code>、<code>skip()</code>、<code>orderBy()</code>、<code>get()</code>、<code>field()</code>、<code>count()</code> 等操作。</p><p>只有当调用<code>get()</code>时才会真正发送查询请求。</p><p>注：默认取前100条数据，最大取前100条数据。</p><p><strong>get响应参数</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>Array</td><td>查询结果数组</td></tr></tbody></table><h2 id="一、添加查询条件" tabindex="-1"><a class="header-anchor" href="#一、添加查询条件"><span>一、添加查询条件</span></a></h2><p>collection.where()</p><p><strong>在聚合操作中请使用match</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>筛选出所有内存大于 8g 的计算机商品：\nconst dbCmd = db.command // 取指令\ndb.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    memory: dbCmd.gt(8), // 表示大于 8\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>查询所有 name 字段以 ABC 开头的用户\ndb.collection(&#39;user&#39;).where({\n  name: new RegExp(&#39;^ABC&#39;)\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、获取查询数量" tabindex="-1"><a class="header-anchor" href="#二、获取查询数量"><span>二、获取查询数量</span></a></h2><p>collection.count()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;\n}).count()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应参数</p><table><thead><tr><th>字段</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>total</td><td>Number</td><td>否</td><td>计数结果</td></tr></tbody></table><h2 id="三、设置记录数量" tabindex="-1"><a class="header-anchor" href="#三、设置记录数量"><span>三、设置记录数量</span></a></h2><p>collection.limit()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await collection.limit(1).get() // 只返回第一条记录\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="四、设置起始位置" tabindex="-1"><a class="header-anchor" href="#四、设置起始位置"><span>四、设置起始位置</span></a></h2><p>collection.skip(value)</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await collection.skip(4).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五、对结果排序" tabindex="-1"><a class="header-anchor" href="#五、对结果排序"><span>五、对结果排序</span></a></h2><p>collection.orderBy(field, orderType)</p><p>参数说明</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>field</td><td>string</td><td>是</td><td>排序的字段</td></tr><tr><td>orderType</td><td>string</td><td>是</td><td>排序的顺序，升序(asc) 或 降序(desc)</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await collection.orderBy(&quot;name&quot;, &quot;asc&quot;).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="六、指定返回字段" tabindex="-1"><a class="header-anchor" href="#六、指定返回字段"><span>六、指定返回字段</span></a></h2><p>collection.field()</p><p>从查询结果中，过滤掉不需要的字段，或者指定要返回的字段。</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>-</td><td>object</td><td>是</td><td>过滤字段对象，包含字段名和策略，不返回传false，返回传true</td></tr></tbody></table><p>备注：只能指定要返回的字段或者不要返回的字段。即{&#39;a&#39;: true, &#39;b&#39;: false}是一种错误的参数格式</p><h2 id="七、查询指令" tabindex="-1"><a class="header-anchor" href="#七、查询指令"><span>七、查询指令</span></a></h2><p>查询指令以dbCmd.开头，包括等于、不等于、大于、大于等于、小于、小于等于、in、nin、and、or。</p><ul><li><p>eq 等于</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>写法1：使用:来比较\nlet res = await db.collection(&#39;articles&#39;).where({\n  quarter: &#39;2020 Q2&#39;\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>写法2：使用指令dbcmd.eq()\nlet res = await db.collection(&#39;articles&#39;).where({\n  quarter: dbCmd.eq(&#39;2020 Q2&#39;)\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>eq 特殊用法</strong></p><p>用于表示字段等于某个对象的情况</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 这种写法表示 stat 对象等于 { brand: &#39;S&#39;, name: &#39;S-01&#39; }\n// 对象中还有其他字段时无法匹配，例如：{ brand: &#39;S&#39;, name: &#39;S-01&#39;, author: &#39;S-01-A&#39; }\n// 对象中字段顺序不一致也不能匹配，例如：{ name: &#39;S-01&#39;, brand: &#39;S&#39; }\nconst dbCmd = db.command\nlet res = await db.collection(&#39;articles&#39;).where({\n  stat: dbCmd.eq({\n    brand: &#39;S&#39;,\n    name: &#39;S-01&#39;\n  })\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>neq 不等于</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;goods&#39;).where({\n  category: dbCmd.neq(&#39;computer&#39;)\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>gt 大于</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;goods&#39;).where({\n  price: dbCmd.gt(3000)\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>gte 大于等于</p></li><li><p>lt 小于</p></li><li><p>lte 小于等于</p></li><li><p>in 在数组中</p><p>字段值在给定的数组中。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>筛选出内存为 8g 或 16g 的计算机商品：\nlet res = await db.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    memory: dbCmd.in([8, 16])\n  }\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>nin 不在数组中</p><p>字段值不在给定的数组中。</p></li><li><p>and 且</p><p>表示需同时满足指定的两个或以上的条件。</p><p><strong>流式写法：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>如筛选出内存大于 4g 小于 32g 的计算机商品：\ndb.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    memory: dbCmd.gt(4).and(dbCmd.lt(32))\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>前置写法：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>db.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    memory: dbCmd.and(dbCmd.gt(4), dbCmd.lt(32))\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>or 或</p><p><strong>表示需满足所有指定条件中的至少一个</strong></p><p><strong>流式写法：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>筛选出价格小于 4000 或在 6000-8000 之间的计算机：\ndb.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    price:dbCmd.lt(4000).or(dbCmd.gt(6000).and(dbCmd.lt(8000)))\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>前置写法：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>db.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    price: dbCmd.or(dbCmd.lt(4000), dbCmd.and(dbCmd.gt(6000), dbCmd.lt(8000)))\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>跨字段 “或” 操作</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>如筛选出内存 8g 或 cpu 3.2 ghz 的计算机\ndb.collection(&#39;goods&#39;).where(dbCmd.or(\n  {\n    type: {\n      memory: dbCmd.gt(8)\n    }\n  },\n  {\n    type: {\n      cpu: 3.2\n    }\n  }\n))\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="八、正则表达式查询" tabindex="-1"><a class="header-anchor" href="#八、正则表达式查询"><span>八、正则表达式查询</span></a></h2><p>db.RegExp</p><p>根据正则表达式进行筛选</p><p>筛选出 version 字段开头是 &quot;数字+s&quot; 的记录，并且忽略大小写</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 可以直接使用正则表达式\ndb.collection(&#39;articles&#39;).where({\n  version: /^\\ds/i\n})\n\n// 也可以使用new RegExp\ndb.collection(&#39;user&#39;).where({\n  name: new RegExp(&#39;^\\\\ds&#39;, &#39;i&#39;)\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',40)],l={},a=(0,i(6262).A)(l,[["render",function(e,d){return(0,n.uX)(),(0,n.CE)("div",null,t)}]]),s=JSON.parse('{"path":"/markdown/%E5%89%8D%E7%AB%AF/UniCloud/%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3.html","title":"查询文档","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、添加查询条件","slug":"一、添加查询条件","link":"#一、添加查询条件","children":[]},{"level":2,"title":"二、获取查询数量","slug":"二、获取查询数量","link":"#二、获取查询数量","children":[]},{"level":2,"title":"三、设置记录数量","slug":"三、设置记录数量","link":"#三、设置记录数量","children":[]},{"level":2,"title":"四、设置起始位置","slug":"四、设置起始位置","link":"#四、设置起始位置","children":[]},{"level":2,"title":"五、对结果排序","slug":"五、对结果排序","link":"#五、对结果排序","children":[]},{"level":2,"title":"六、指定返回字段","slug":"六、指定返回字段","link":"#六、指定返回字段","children":[]},{"level":2,"title":"七、查询指令","slug":"七、查询指令","link":"#七、查询指令","children":[]},{"level":2,"title":"八、正则表达式查询","slug":"八、正则表达式查询","link":"#八、正则表达式查询","children":[]}],"git":{},"filePathRelative":"markdown/前端/UniCloud/查询文档.md"}')}}]);