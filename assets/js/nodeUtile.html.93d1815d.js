"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[1441],{7187:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>i,data:()=>u});var t=a(641);const e=(0,t.Fv)('<h2 id="论如何在-node-使用命令行" tabindex="-1"><a class="header-anchor" href="#论如何在-node-使用命令行"><span>论如何在 node 使用命令行</span></a></h2><p>演示一下如何在 node 中使用 git add .等命令行。</p><h3 id="项目代码一键上传" tabindex="-1"><a class="header-anchor" href="#项目代码一键上传"><span>项目代码一键上传</span></a></h3><p>在项目根目录创建<code>deploy.js</code>, 使用<code>node</code>运行该文件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>node deploy<span class="token punctuation">.</span>js <span class="token string">&#39;参数1&#39;</span> <span class="token string">&#39;参数2&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对的, 启动 node 进程是可以传入参数的：</p><h3 id="启动-node-进程时传入参数" tabindex="-1"><a class="header-anchor" href="#启动-node-进程时传入参数"><span>启动 node 进程时传入参数：</span></a></h3>',7),p={href:"https://nodejs.cn/api/process/process_argv.html",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Lk)("code",null,"node",-1),c=(0,t.Fv)('<ol><li><code>process.argv[0]: process.execPath</code>(返回启动 <code>Node.js</code> 进程的可执行文件的绝对路径名)</li><li><code>process.argv[1]</code>: 正在执行的 <code>JavaScript</code> 文件的路径</li><li><code>process.argv[2]、process.argv[3]...</code>: 这里是传入的参数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// process.argv</span>\n<span class="token punctuation">[</span>\n  <span class="token string">&#39;/usr/local/bin/node&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;/Users/obkoro1/work/itemName/deploy.js&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;参数 1&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;参数 2&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deploy-js" tabindex="-1"><a class="header-anchor" href="#deploy-js"><span>deploy.js</span></a></h3><p>执行命令行主要是靠 <code>node</code> 自带模块：<code>child_process</code>的<code>execSync</code>方法来创建一个子进程运行命令。</p><p>运行方法如上所示，拷贝下面的代码来试一试就知道了。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// deploy.js</span>\n<span class="token comment">// node内置模块 同步执行命令行</span>\n<span class="token keyword">const</span> execSync <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execSync<span class="token punctuation">;</span>\n<span class="token keyword">const</span> commitParam <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// commit 参数</span>\n<span class="token function">myExecSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git add . &amp;&amp; git commit -m </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>commitParam<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &amp;&amp; git pull &amp;&amp; git push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@description</span>: 同步执行命令行\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">cmd</span> 字符串\n * @Date: 2019-08-02 17:43:41\n */</span>\n<span class="token keyword">function</span> <span class="token function">myExecSync</span><span class="token punctuation">(</span><span class="token parameter">cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 除了该方法直到子进程完全关闭后才返回 执行完毕 返回</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> output <span class="token operator">=</span> <span class="token function">execSync</span><span class="token punctuation">(</span>\n      cmd<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">maxBuffer</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">killSignal</span><span class="token operator">:</span> <span class="token string">&#39;SIGTERM&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">cwd</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 进程错误时 回调</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">执行命令</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cmd<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">出错:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">执行命令</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cmd<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">出错:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6),l={},i=(0,a(6262).A)(l,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[e,(0,t.Lk)("p",null,[(0,t.Lk)("a",p,[(0,t.eW)("process.argv"),(0,t.bF)(a)]),(0,t.eW)(" 是"),o,(0,t.eW)("自带的属性，这是一个数组,数组的前两个元素是默认值：")]),c])}]]),u=JSON.parse('{"path":"/utils/nodeUtile.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"论如何在 node 使用命令行","slug":"论如何在-node-使用命令行","link":"#论如何在-node-使用命令行","children":[{"level":3,"title":"项目代码一键上传","slug":"项目代码一键上传","link":"#项目代码一键上传","children":[]},{"level":3,"title":"启动 node 进程时传入参数：","slug":"启动-node-进程时传入参数","link":"#启动-node-进程时传入参数","children":[]},{"level":3,"title":"deploy.js","slug":"deploy-js","link":"#deploy-js","children":[]}]}],"git":{},"filePathRelative":"utils/nodeUtile.md"}')}}]);