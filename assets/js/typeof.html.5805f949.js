"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[8197],{1060:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>i,data:()=>u});var t=a(641);const o=a.p+"assets/img/typeof.2e37ac56.jpg",e=a.p+"assets/img/constructor.d1c8c7f0.jpg",p=a.p+"assets/img/image.e577a986.png",c=[(0,t.Fv)('<h1 id="js-中四种常见的数据类型判断方法" tabindex="-1"><a class="header-anchor" href="#js-中四种常见的数据类型判断方法"><span>JS 中四种常见的数据类型判断方法</span></a></h1><p>在<code>js</code>中，有四种常见的数据类型判断方法</p><ol><li>typeof</li><li>instanceof 和 isprototype()</li><li>constructor</li><li>Object.prototype.toString.of</li></ol><h2 id="一、typeof" tabindex="-1"><a class="header-anchor" href="#一、typeof"><span>一、typeof</span></a></h2><blockquote><p>typeof 运算符返回一个字符串，标识操作对象的类型：typeof 操作类型</p></blockquote><p><strong>1.常见类型对应的 <code>typeof</code> 返回值</strong></p><img src="'+o+'"><p>代码示例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// boolean</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment">// string</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">11111</span><span class="token punctuation">)</span> <span class="token comment">// number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">)</span> <span class="token comment">// number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// number</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// bigint</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// symbol</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// object</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// function</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// function</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// object</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// object</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token operator">/</span>abc<span class="token operator">/</span><span class="token punctuation">)</span> <span class="token comment">// object</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// object</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// object</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.为什么<code>typeof null</code> 返回的是<code>Object</code></strong></p><ol><li>在 <code>js</code>的最初实现中，JS 中的值是由已给表示类型的<code>标签</code>和<code>实际数据值</code>表示的，对象的<code>类型标签</code>是<code>0</code>,由于 null 代表的空指针，在大多数平台下值表示为<code>0x00</code>因此，<code>null</code>的标签类型是<code>0</code>.所以<code>typeof null</code>返回的就是<code>Object</code></li></ol><p><strong>3.为什么<code>typeof (()=&gt;{})</code>返回的是<code>function</code></strong></p><p><code>function</code> 实际上是 <code>Object</code> 的的一个子类型，更深点的说，函数是一个可以被调用的对象；那么他为什么能被调用呢？那是因为其内部实现了 <code>call</code> 方法，当函数被调用时会执行内部的 <code>call</code> 方法</p><p>回到正题，为什么<code>typeof (()=&gt;{})</code>会返回 function 呢？这里主要还是要看 Es6 中 typeof 是怎么区分函数和对象的</p><ul><li>一个对象如果没实现了 call 内部方法，那么就返回 object</li><li>一个对象如果实现了 call 内部方法，那么他就返回 function</li></ul><h2 id="二、instanceof-和-isprototypeof" tabindex="-1"><a class="header-anchor" href="#二、instanceof-和-isprototypeof"><span>二、instanceof 和 isPrototypeOf()</span></a></h2><blockquote><p>在 JS 中有<code>两种方法</code>可以判断<code>原型</code>是否存在于某个实例的<code>原型链</code>上，通过这种判断就可以帮助我们确定<code>引用数据</code>的具体类型；需要注意的是：该两种方法<code>只能判断引用数据，不能判断基本类型</code></p></blockquote><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span>instanceof</span></a></h3><ol><li><p><strong>介绍：</strong> <code>instanceof</code>用于检测构造函数的<code>prototype</code>属性是否出现在某个实例对象的<code>原型链</code>中</p></li><li><p><strong>语法：</strong> <code>实例对象instanceof 构造函数</code>，返回的是一个<code>boolean</code>值</p></li><li><p><strong>示例：</strong></p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> auto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&#39;haha&#39;</span><span class="token punctuation">)</span>\n\nauto <span class="token keyword">instanceof</span> <span class="token class-name">Car</span> <span class="token comment">//true</span>\nauto <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-prototype-isprototypeof" tabindex="-1"><a class="header-anchor" href="#object-prototype-isprototypeof"><span>Object.prototype.isPrototypeOf()</span></a></h3><ol><li><p><strong>介绍：</strong> isPrototypeof()方法用于检查一个对象是否存在于另一个对象的原型链中</p></li><li><p><strong>语法：</strong> 原型.isPrototypeof(实例)</p></li><li><p><strong>示例：</strong></p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> auto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span>auto<span class="token punctuation">)</span> <span class="token comment">//true</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span>auto<span class="token punctuation">)</span> <span class="token comment">//true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、-根据-constructor-进行判断" tabindex="-1"><a class="header-anchor" href="#三、-根据-constructor-进行判断"><span>三、 根据 constructor 进行判断</span></a></h3><p>constructor 判断方法跟 instanceof 相似，如下图是<code>原型</code>，<code>示例</code>，<code>构造函数</code>之间的关系图，从图中可知，在<code>实例对象</code>的原型中存在<code>constructor</code>指向<code>构造函数</code></p><img src="'+e+'"><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> auto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nauto<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Car <span class="token comment">//true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同于<code>instanceof</code>,通过该方式，既能处理<code>引用数据</code>，又能处理<code>基本数据</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不同于 <code>instanceof</code> ，不能判断<code>父类</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nb<span class="token punctuation">.</span>constructor <span class="token operator">===</span> <span class="token constant">B</span> <span class="token comment">// true</span>\nb<span class="token punctuation">.</span>constructor <span class="token operator">===</span> <span class="token constant">A</span> <span class="token comment">// false</span>\n\nb <span class="token keyword">instanceof</span> <span class="token class-name">B</span> <span class="token comment">// true</span>\nb <span class="token keyword">instanceof</span> <span class="token class-name">A</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：<code>null</code> 和 <code>undefined</code> 没有 <code>constructor</code> 所以无法检测 <code>Null</code> 和 <code>Undefined</code></strong></p><h2 id="四、object-prototyp-tostring-call" tabindex="-1"><a class="header-anchor" href="#四、object-prototyp-tostring-call"><span>四、Object.prototyp.toString.call()</span></a></h2><p><code>Object.prototyp.toString.call()</code> 方法返回一个表示该对象的字符串，该对象的格式为<code>[Object Type]</code>,这里的 <code>Type</code> 就是对象的类型</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> toString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString\n\n<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token comment">// [object Number]</span>\n<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// [object Null]</span>\n<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// [object Undefined]</span>\n\n<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span> <span class="token comment">// [object Math]</span>\n<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Date]</span>\n<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object String]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意：**对于自定义构造函数实例化出来的对象，返回的事<code>[Object Object]</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> toString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString\n<span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**补充：**一个通用方法，一行代码获取<code>数据类型</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结"><span>五、总结</span></a></h2><p><img src="'+p+'" alt="alt text"></p><ol><li><p><code>typeof</code>适用于判断基本类型，特别注意的是<code>Null</code>会返回<code>Object</code>,<code>Function</code>返回 <code>function</code> 其余引用类型返回的都是 <code>Object</code></p></li><li><p><code>instanceof</code> 或者 <code>isPrototype()</code>可以判断引用类型，同时可判断父类</p></li><li><p><code>constructor</code>可以判断基恩类型、引用类型，但是不可以判断 <code>null</code>,<code>undefined</code>,并且无法判断<code>对象父类</code></p></li><li><p><code>Object.prototype.toString.call()</code>万能方法，对局 js 所有类型都能识别出来，唯一不足的就是不能判断对象父类</p></li></ol>',42)],l={},i=(0,a(6262).A)(l,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,c)}]]),u=JSON.parse('{"path":"/accumulation/typeof.html","title":"JS 中四种常见的数据类型判断方法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、typeof","slug":"一、typeof","link":"#一、typeof","children":[]},{"level":2,"title":"二、instanceof 和 isPrototypeOf()","slug":"二、instanceof-和-isprototypeof","link":"#二、instanceof-和-isprototypeof","children":[{"level":3,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]},{"level":3,"title":"Object.prototype.isPrototypeOf()","slug":"object-prototype-isprototypeof","link":"#object-prototype-isprototypeof","children":[]},{"level":3,"title":"三、 根据 constructor 进行判断","slug":"三、-根据-constructor-进行判断","link":"#三、-根据-constructor-进行判断","children":[]}]},{"level":2,"title":"四、Object.prototyp.toString.call()","slug":"四、object-prototyp-tostring-call","link":"#四、object-prototyp-tostring-call","children":[]},{"level":2,"title":"五、总结","slug":"五、总结","link":"#五、总结","children":[]}],"git":{"updatedTime":1709731854000,"contributors":[{"name":"“liwx”","email":"“1258598654qq.com”","commits":1}]},"filePathRelative":"accumulation/typeof.md"}')}}]);