"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[2845],{335:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>u});var p=a(641);const t=(0,p.Lk)("h2",{id:"跳跃游戏-2",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#跳跃游戏-2"},[(0,p.Lk)("span",null,[(0,p.Lk)("strong",null,"跳跃游戏 2")])])],-1),e={href:"https://leetcode.cn/problems/jump-game-ii/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Fv)('<h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码：</span></a></h3><p>贪心</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">jump</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> jumpMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 预计最远距离</span>\n  <span class="token keyword">let</span> last_canJumpMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 上次可跳的最远距离</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> nowMax <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">;</span> <span class="token comment">// 当前最远距离</span>\n    jumpMax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>jumpMax<span class="token punctuation">,</span> nowMax<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下一步最远距离</span>\n    <span class="token comment">// 上次跳跃后 下一步的最远距离 需要再跳</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_canJumpMax <span class="token operator">===</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      last_canJumpMax <span class="token operator">=</span> jumpMax<span class="token punctuation">;</span> <span class="token comment">// 最远距离更新</span>\n      step<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 步数更新</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 最远距离超过终点</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_canJumpMax <span class="token operator">&gt;=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> step<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始能跳的步数</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 总共跳几次</span>\n  <span class="token keyword">let</span> everOne <span class="token operator">=</span> <span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 每次经过的地方</span>\n  <span class="token keyword">function</span> <span class="token function">jumpOne</span><span class="token punctuation">(</span><span class="token parameter">newNums<span class="token punctuation">,</span> oneNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> maxNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 最远能跳多远</span>\n    <span class="token keyword">let</span> maxIndex <span class="token operator">=</span> oneNum<span class="token punctuation">;</span> <span class="token comment">// 预设最大值</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>oneNum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> newNums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 步数已经足够到达最后一个位置</span>\n      maxIndex <span class="token operator">=</span> newNums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 每个点都跳一遍</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oneNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当前已跳步数大于 之前缓存的最大步数 更新最远距离</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> maxNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          maxNum <span class="token operator">=</span> newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">;</span> <span class="token comment">// 最远能跳多远</span>\n          maxIndex <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 最远跳的目标位置</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    total<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 当前跳跃次数</span>\n    everOne<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每次到达的位置</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIndex <span class="token operator">!==</span> newNums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newNums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> maxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除已跳的元素</span>\n      <span class="token function">jumpOne</span><span class="token punctuation">(</span>newNums<span class="token punctuation">,</span> newNums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">jumpOne</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> total<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),c={},l=(0,a(6262).A)(c,[["render",function(n,s){const a=(0,p.g2)("ExternalLinkIcon");return(0,p.uX)(),(0,p.CE)("div",null,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("题目链接"),(0,p.bF)(a)])]),o])}]]),u=JSON.parse('{"path":"/algorithm/middle/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F2.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"跳跃游戏 2","slug":"跳跃游戏-2","link":"#跳跃游戏-2","children":[{"level":3,"title":"代码：","slug":"代码","link":"#代码","children":[]}]}],"git":{"updatedTime":1724144871000,"contributors":[{"name":"“liwx”","email":"“1258598654qq.com”","commits":1}]},"filePathRelative":"algorithm/middle/跳跃游戏2.md"}')}}]);