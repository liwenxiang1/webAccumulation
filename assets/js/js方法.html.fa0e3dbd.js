"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[5225],{2656:(e,i,n)=>{n.r(i),n.d(i,{comp:()=>c,data:()=>u});var s=n(641);const l=(0,s.Fv)('<h1 id="js-方法" tabindex="-1"><a class="header-anchor" href="#js-方法"><span>js 方法</span></a></h1><h2 id="网上资源参考" tabindex="-1"><a class="header-anchor" href="#网上资源参考"><span>网上资源参考：</span></a></h2><p>https://www.cnblogs.com/zyfeng/p/10541133.html</p><p>https://www.cnblogs.com/wfc139/p/10383509.html</p><blockquote><p>阮一峰 es6 教程 https://es6.ruanyifeng.com/</p></blockquote><h2 id="一、export-方法" tabindex="-1"><a class="header-anchor" href="#一、export-方法"><span>一、export 方法</span></a></h2><h3 id="_1-导出单个方法" tabindex="-1"><a class="header-anchor" href="#_1-导出单个方法"><span>1.导出单个方法</span></a></h3><ul><li>方式一：<code>export function</code><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//common.js 导出\nexport function getRandomId() {}\n//index.js 引用\nimport { getRandomId } from &#39;@/utils/common.js&#39;\nimport * as common from &#39;@/utils/common.js&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>方式二：<code>exports.xxx</code><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// number.js 导出\n&#39;use strict&#39;;\nObject.defineProperty(exports, &#39;__esModule&#39;, { value: true });\nfunction strip(num, precision) {\n    return 。。。;\n}\nexports.strip = strip;\n// seat.vue 引入\nimport NumberPlus from &quot;@/utils/number&quot;;\nNumberPlus.strip(x,x)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-导出对象" tabindex="-1"><a class="header-anchor" href="#_2-导出对象"><span>2.导出对象</span></a></h3><ul><li><p>方式一：<code>module.exports</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//router.js 导出\nconst router = {\n  colorui: &#39;/devTools/colorui/colorui&#39;,\n  imgfilter: &#39;/devTools/imgfilter/imgfilter&#39;\n}\nmodule.exports = router\n\n//index.js 引用\nimport {\n  colorui\n} from &#39;../../router&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式二：<code>module.exports</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//picture.js 导出\nasync function getAccessToken(str64) {}\nmodule.exports = {\n  getAccessToken\n}\n\n//index.js 引用\nconst pictureModel = require(&#39;./picture.js&#39;);\npictureModel.getAccessToken(event.str64)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式三：<code>export default</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//request.js 导出\nconst service = axios.create({})\nexport default service\n//index.js 引用\nimport request from &#39;@/utils/request&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式四：<code>export default</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//utils.js 导出\nconst objToUrl = obj =&gt; {\n  return ...;\n}\nconst validatePhone = (rule, value, callback) =&gt; {\n  ...\n  callback();\n};\nexport default {\n  objToUrl,\n  validatePhone\n}\n//common.js 引入\nimport utils from &quot;../utils/utils&quot;\nutils.objToUrl(params)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式五：<code>export default</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//nfc.js 导出\nexport default {\n    listenNFCStatus: function () { ... },\n    writeData: function () { ... },\n    write(intent) { toast(&#39;请将NFC标签靠近！&#39;); ... }\n}\nfunction toast(content){\n    uni.showToast({\n        title: content,\n        icon: &#39;none&#39;\n    })\n}\n//index.vue 导入\nimport nfc from &#39;../../utils/hexiii-nfc.js&#39;\nnfc.listenNFCStatus();\nnfc.writeData();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="二、数组、字符串常用方法" tabindex="-1"><a class="header-anchor" href="#二、数组、字符串常用方法"><span>二、数组、字符串常用方法</span></a></h2><h3 id="_1-map-方法" tabindex="-1"><a class="header-anchor" href="#_1-map-方法"><span>1. map()方法</span></a></h3><blockquote><p>map() 方法<code>创建一个新数组</code>，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p></blockquote><p>区别于<code>forEach</code>方法，forEach 并不会新建数组</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var array1 = [1,2,3,4];\nconst map1 = array1.map(x =&gt; x *2);\nconsole.log(map1);\n打印结果为:\n&gt; Array [2,4,5,8]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// map和async组合使用，返回操作结果的数组\nlet res = await collection.get()\nres.data.map(async(document) =&gt; {\n  return await collection.doc(document.id).remove();\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-join-方法" tabindex="-1"><a class="header-anchor" href="#_2-join-方法"><span>2. join()方法</span></a></h3><blockquote><p>用于把数组中的所有元素放入一个字符串。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var arr = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];\narr.join();  得到 a,b,c,d,e\narr.join(&quot;-&quot;); 得到 a-b-c-d-e\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-substring-方法" tabindex="-1"><a class="header-anchor" href="#_3-substring-方法"><span>3. substring()方法</span></a></h3><blockquote><p>用于提取字符串中介于两个指定下标之间的字符</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var yearMonth=&quot;202012&quot;\nyearMonth.substring(0, 4); 得到：&quot;2020&quot;\nyearMonth.substring(4);  得到：&quot;12&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-concat-方法" tabindex="-1"><a class="header-anchor" href="#_4-concat-方法"><span>4. concat()方法</span></a></h3><p>将两个字符串或数组连接在一起；</p><ul><li>1、String.concat(str)<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var s1 = &#39;abc&#39;;\nvar s2 = &#39;def&#39;;\ns1.concat(s2) // &quot;abcdef&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>2、Array.concat(arr)<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var s1=[1,2,3]\nvar s2=[4,5,6]\ns1.concat(s2) //[1,2,3,4,5,6]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>3、字符串和数组混用<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var s1=[1,2,3]\nvar s2=&#39;444&#39;\ns1.concat(s2) // [1, 2, 3, &quot;444&quot;]\ns2.concat(s1) // &quot;4441,2,3&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-slice-方法" tabindex="-1"><a class="header-anchor" href="#_5-slice-方法"><span>5. slice()方法</span></a></h3><ul><li><p>1、String.slice(start,end)</p><p>返回一个子片段，对原先的 string 没有影响,与 subString 的区别是，还可以用负数当参数</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var s = &quot;1234567&quot;;\ns.slice(0,4)  得到：&quot;1234&quot;\ns.slice(2,4)  得到：&quot;34&quot;\ns.slice(4)  得到：&quot;567&quot;\ns.slice(3,-1)  得到：&quot;456&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>2.Array.slice(start,end)</p><p>返回从 start 开始到 end 的子数组</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var a = [1,2,3,4,5];\na.slice(0,3);    // Returns [1,2,3]\na.slice(3);      // Returns [4,5]\na.slice(1,-1);   // Returns [2,3,4]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_6-includes-方法" tabindex="-1"><a class="header-anchor" href="#_6-includes-方法"><span>6.includes()方法</span></a></h3><p>用来判断一个数组是否包含一个指定的值，如果是返回 true，否则 false。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-some-方法" tabindex="-1"><a class="header-anchor" href="#_7-some-方法"><span>7.some()方法</span></a></h3><p>用于检测数组中的元素是否满足指定条件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let ages = [3, 10, 18, 20];\nlet hasAdult= ages.some( age =&gt; age&gt;=18 ) //true\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-every-方法" tabindex="-1"><a class="header-anchor" href="#_8-every-方法"><span>8.every()方法</span></a></h3><p>用于检测数组所有元素是否都符合指定条件（通过函数提供）</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let ages = [3, 10, 18, 20];\nlet allAdult= ages.every( age =&gt; age&gt;=18 ) //false\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-其他" tabindex="-1"><a class="header-anchor" href="#_9-其他"><span>9.其他</span></a></h3>',37),a={href:"https://www.jianshu.com/p/e375ba1cfc47",target:"_blank",rel:"noopener noreferrer"},d=(0,s.Lk)("code",null,"reduce方法",-1),t=(0,s.Fv)('<h3 id="_10-replace-【replace-g-替换所有的-】" tabindex="-1"><a class="header-anchor" href="#_10-replace-【replace-g-替换所有的-】"><span>10.replace：【replace(/[$,]/g, &#39;&#39;)替换所有的$,】</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let data=&#39;$433,060&#39;,\n    d1=data.replace(/[\\$,]/g, &#39;&#39;),\n    d2=data.replace(/[\\$,]/g, &#39;&#39;)*1\nconsole.log(d1,typeof d1)   //433060 string\nconsole.log(d2,typeof d2)   //433060 number\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="集合筛选" tabindex="-1"><a class="header-anchor" href="#集合筛选"><span>集合筛选</span></a></h4><blockquote><p>两个集合数据筛选</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let arr=[100,2,300,400]\nlet users=[{id:1},{id:2},{id:3},{id:4}]\nlet userFil = users.filter(item =&gt; {\n\treturn arr.indexOf(item.id) &gt; -1\n})\nconsole.log(userFil)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、项目中的-js-方法记录" tabindex="-1"><a class="header-anchor" href="#三、项目中的-js-方法记录"><span>三、项目中的 js 方法记录</span></a></h2><ul><li>方法简写</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//参数：根目录下的dir文件夹名称\n//返回：dir对应的全路径值\nconst resolve = dir =&gt; path.join(__dirname, dir)\nresolve(&#39;src&#39;)  //返回src目录的全路径\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>标签、状态集合数据使用对象存储(类似 java 里面的 Map 或者枚举)&lt;其实就是一种对应关系的数据集合&gt;，这样写的目的是很清晰</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 这里的对象的属性值同上面，是使用了方法的值。\nconst filter = {\n    all: todos =&gt; todos,\n    active: todos =&gt; todos.filter(item =&gt; !item.done),\n    complete: todos =&gt; todos.filter(item =&gt; item.done)\n}\n// 使用：filter[&#39;active&#39;](this.todoList) 得到的就是筛选出来的数据\nstatusMap: {\n  12: &quot;正在拼团&quot;,\n  40: &quot;待评价&quot;,\n  60: &quot;退款中&quot;,\n  70: &quot;已退款&quot;\n}\n// 使用：statusMap[status] status是接口返回的值，就可以得到对应的状态名称\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>遍历对象属性转换成数组使用</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>infoObj: {\n  sqbh: &#39;20220120088175&#39;,\n  sqsj: &#39;2021-12-10  14:30:15&#39;,\n  khmc: &#39;张雨辰&#39;,\n  dz: &#39;2022-02-07&#39;,\n  spjg: &#39;申请未通过&#39;,\n}\ninfoList() {\n  let objMap = {sqbh: &quot;申请编号&quot;, sqsj: &quot;申请时间&quot;, khmc: &quot;客户名称&quot;, dz: &quot;地址&quot;, spjg: &quot;审批结果&quot;}\n  let list = Object.keys(objMap).map(key =&gt; {\n    return {name: objMap[key], value: this.infoObj[key]}\n  })\n  return list\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',12),r={},c=(0,n(6262).A)(r,[["render",function(e,i){const n=(0,s.g2)("ExternalLinkIcon");return(0,s.uX)(),(0,s.CE)("div",null,[l,(0,s.Lk)("blockquote",null,[(0,s.Lk)("p",null,[(0,s.Lk)("a",a,[d,(0,s.bF)(n)])])]),t])}]]),u=JSON.parse('{"path":"/markdown/%E5%89%8D%E7%AB%AF/html/js%E6%96%B9%E6%B3%95.html","title":"js 方法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"网上资源参考：","slug":"网上资源参考","link":"#网上资源参考","children":[]},{"level":2,"title":"一、export 方法","slug":"一、export-方法","link":"#一、export-方法","children":[{"level":3,"title":"1.导出单个方法","slug":"_1-导出单个方法","link":"#_1-导出单个方法","children":[]},{"level":3,"title":"2.导出对象","slug":"_2-导出对象","link":"#_2-导出对象","children":[]}]},{"level":2,"title":"二、数组、字符串常用方法","slug":"二、数组、字符串常用方法","link":"#二、数组、字符串常用方法","children":[{"level":3,"title":"1. map()方法","slug":"_1-map-方法","link":"#_1-map-方法","children":[]},{"level":3,"title":"2. join()方法","slug":"_2-join-方法","link":"#_2-join-方法","children":[]},{"level":3,"title":"3. substring()方法","slug":"_3-substring-方法","link":"#_3-substring-方法","children":[]},{"level":3,"title":"4. concat()方法","slug":"_4-concat-方法","link":"#_4-concat-方法","children":[]},{"level":3,"title":"5. slice()方法","slug":"_5-slice-方法","link":"#_5-slice-方法","children":[]},{"level":3,"title":"6.includes()方法","slug":"_6-includes-方法","link":"#_6-includes-方法","children":[]},{"level":3,"title":"7.some()方法","slug":"_7-some-方法","link":"#_7-some-方法","children":[]},{"level":3,"title":"8.every()方法","slug":"_8-every-方法","link":"#_8-every-方法","children":[]},{"level":3,"title":"9.其他","slug":"_9-其他","link":"#_9-其他","children":[]},{"level":3,"title":"10.replace：【replace(/[$,]/g, \'\')替换所有的$,】","slug":"_10-replace-【replace-g-替换所有的-】","link":"#_10-replace-【replace-g-替换所有的-】","children":[]}]},{"level":2,"title":"三、项目中的 js 方法记录","slug":"三、项目中的-js-方法记录","link":"#三、项目中的-js-方法记录","children":[]}],"git":{},"filePathRelative":"markdown/前端/html/js方法.md"}')}}]);