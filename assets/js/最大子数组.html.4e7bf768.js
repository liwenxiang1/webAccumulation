"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[6553],{4070:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var p=a(641);const t=[(0,p.Fv)('<h2 id="最大子数组" tabindex="-1"><a class="header-anchor" href="#最大子数组"><span><strong>最大子数组</strong></span></a></h2><h3 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span><strong>描述：</strong></span></a></h3><p>给定一个整数数组，找到一个具有最大和的子数组，返回其最大和。</p><h3 id="样例" tabindex="-1"><a class="header-anchor" href="#样例"><span><strong>样例：</strong></span></a></h3><p>给出数组<code>[−2,2,−3,4,−1,2,1,−5,3]</code>，符合要求的子数组为<code>[4,−1,2,1]</code>，其最大和为 <code>6</code></p><h3 id="思路分析" tabindex="-1"><a class="header-anchor" href="#思路分析"><span><strong>思路分析：</strong></span></a></h3><p>本题只要找出最大和即可，保存两个值，一个为元素之间相加的值(需比较元素相加的值与当前元素的大小)，一个为最大值。</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span><strong>代码：</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> nums: A list of integers\n * <span class="token keyword">@return</span>: A integer indicate the sum of max subarray\n */</span>\n<span class="token keyword">const</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化最大值</span>\n  <span class="token keyword">let</span> newMax <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 数组元素相加的缓存值</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    newMax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>newMax <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相加是否大于当前值</span>\n    max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>newMax<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 与最大值相比</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> max<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种方法更难理解点，可以扩展一下思路：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> nums: A list of integers\n * <span class="token keyword">@return</span>: A integer indicate the sum of max subarray\n */</span>\n<span class="token keyword">const</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> nSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 数组元素相加的缓存值</span>\n  <span class="token keyword">var</span> nMax <span class="token operator">=</span> nSum<span class="token punctuation">;</span> <span class="token comment">// 初始化最大值</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> curNum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 当前元素</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>curNum <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> nSum <span class="token operator">=</span> nSum <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> nSum <span class="token operator">+</span> curNum <span class="token operator">:</span> curNum<span class="token punctuation">;</span>\n    <span class="token comment">// 如果两个值都大于 0 两个值相加。否则就取后一个大于 0 的</span>\n    <span class="token keyword">else</span> nSum <span class="token operator">=</span> nSum <span class="token operator">&lt;</span> curNum <span class="token operator">?</span> curNum <span class="token operator">:</span> nSum <span class="token operator">+</span> curNum<span class="token punctuation">;</span> <span class="token comment">// 如果新加的值小于 0 判断结果是否大于新加的值 小于的话就改为新加的值</span>\n    nMax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nMax<span class="token punctuation">,</span> nSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最大值与数组元素相加值比较</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> nMax<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最大和的数组" tabindex="-1"><a class="header-anchor" href="#最大和的数组"><span><strong>最大和的数组：</strong></span></a></h3><p>如果你想把最大和的数组都找出来，你需要保存数组的开始下标和结束下标，这里我演示了第一个方法，下面那个方法也是一样：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">num</span><span class="token operator">:</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 结束的下标 后面要切割数组 需比当前下标+1.把当前值也切割</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> newMax <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">num</span><span class="token operator">:</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>newMax<span class="token punctuation">.</span>num <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 相加大于当前值 缓存改值和结束下标</span>\n      newMax<span class="token punctuation">.</span>num <span class="token operator">=</span> newMax<span class="token punctuation">.</span>num <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      newMax<span class="token punctuation">.</span>end <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 小于当前值 重置 start end</span>\n      newMax<span class="token punctuation">.</span>num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      newMax<span class="token punctuation">.</span>start <span class="token operator">=</span> i<span class="token punctuation">;</span>\n      newMax<span class="token punctuation">.</span>end <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 最大值被超过 把值赋给最大值</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>max<span class="token punctuation">.</span>num <span class="token operator">&lt;</span> newMax<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      max<span class="token punctuation">.</span>num <span class="token operator">=</span> newMax<span class="token punctuation">.</span>num<span class="token punctuation">;</span>\n      max<span class="token punctuation">.</span>start <span class="token operator">=</span> newMax<span class="token punctuation">.</span>start<span class="token punctuation">;</span>\n      max<span class="token punctuation">.</span>end <span class="token operator">=</span> newMax<span class="token punctuation">.</span>end<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> arr <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span>start<span class="token punctuation">,</span> max<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 找出最大和的子数组</span>\n  <span class="token keyword">return</span> max<span class="token punctuation">.</span>num<span class="token punctuation">;</span> <span class="token comment">// 子数组的最大和</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',14)],e={},o=(0,a(6262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,t)}]]),c=JSON.parse('{"path":"/algorithm/simple/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"最大子数组","slug":"最大子数组","link":"#最大子数组","children":[{"level":3,"title":"描述：","slug":"描述","link":"#描述","children":[]},{"level":3,"title":"样例：","slug":"样例","link":"#样例","children":[]},{"level":3,"title":"思路分析：","slug":"思路分析","link":"#思路分析","children":[]},{"level":3,"title":"代码：","slug":"代码","link":"#代码","children":[]},{"level":3,"title":"最大和的数组：","slug":"最大和的数组","link":"#最大和的数组","children":[]}]}],"git":{},"filePathRelative":"algorithm/simple/最大子数组.md"}')}}]);