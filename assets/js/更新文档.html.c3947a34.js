"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[7318],{9716:(i,n,e)=>{e.r(n),e.d(n,{comp:()=>t,data:()=>u});var d=e(641);const l=[(0,d.Fv)('<h1 id="更新文档" tabindex="-1"><a class="header-anchor" href="#更新文档"><span>更新文档</span></a></h1><h3 id="一、更新指定文档" tabindex="-1"><a class="header-anchor" href="#一、更新指定文档"><span>一、更新指定文档</span></a></h3><p>collection.doc().update(Object data)</p><p>参数说明</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>object</td><td>是</td><td>更新字段的Object，{&#39;name&#39;: &#39;Ben&#39;} _id 非必填</td></tr></tbody></table><p>响应参数</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>updated</td><td>Number</td><td>更新成功条数，数据更新前后没变化时会返回0</td></tr></tbody></table><p>更新数组时，已数组下标作为key即可</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>比如以下示例将数组arr内下标为1的值修改为 uniCloud\nlet res = await collection.doc(&#39;doc-id&#39;).update({\n  arr: {\n    1: &quot;uniCloud&quot;\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、更新文档-如果不存在则创建" tabindex="-1"><a class="header-anchor" href="#二、更新文档-如果不存在则创建"><span>二、更新文档，如果不存在则创建</span></a></h3><p>collection.doc().set()</p><p><strong>注意：</strong> 此方法会覆写已有字段，</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await collection.doc(&#39;doc-id&#39;).set({\n  name: &quot;Hey&quot;\n})\n// 更新前\n{\n  &quot;_id&quot;: &quot;doc-id&quot;,\n  &quot;name&quot;: &quot;Hello&quot;,\n  &quot;value&quot;: &quot;World&quot;\n}\n// 更新后\n{\n  &quot;_id&quot;: &quot;doc-id&quot;,\n  &quot;name&quot;: &quot;Hey&quot;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、批量更新文档" tabindex="-1"><a class="header-anchor" href="#三、批量更新文档"><span>三、批量更新文档</span></a></h3><p>collection.update()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await collection.where({name: dbCmd.eq(&#39;hey&#39;)}).update({\n  age: 18,\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、更新数组对象内指定下标的元素" tabindex="-1"><a class="header-anchor" href="#四、更新数组对象内指定下标的元素"><span>四、更新数组对象内指定下标的元素</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const res = await db.collection(&#39;query&#39;).doc(&#39;1&#39;).update({\n  // 更新students[1]\n  [&#39;students.&#39; + 1]: {\n    name: &#39;wang&#39;\n  }\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;1&quot;,\n  &quot;students&quot;: [\n    {\n      &quot;name&quot;: &quot;zhang&quot;\n    },\n    {\n      &quot;name&quot;: &quot;li&quot;\n    }\n  ]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;1&quot;,\n  &quot;students&quot;: [\n    {\n      &quot;name&quot;: &quot;zhang&quot;\n    },\n    {\n      &quot;name&quot;: &quot;wang&quot;\n    }\n  ]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、更新数组对象内匹配条件的元素" tabindex="-1"><a class="header-anchor" href="#五、更新数组对象内匹配条件的元素"><span>五、更新数组对象内匹配条件的元素</span></a></h3><p>注意：只可确定数组内只会被匹配到一个的时候使用</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const res = await db.collection(&#39;query&#39;).where({\n    &#39;students.id&#39;: &#39;001&#39;\n}).update({\n  // 将students内id为001的name改为li\n    &#39;students.$.name&#39;: &#39;li&#39;\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;1&quot;,\n  &quot;students&quot;: [\n    {\n      &quot;id&quot;: &quot;001&quot;,\n      &quot;name&quot;: &quot;zhang&quot;\n    },\n    {\n      &quot;id&quot;: &quot;002&quot;,\n      &quot;name&quot;: &quot;wang&quot;\n    }\n  ]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;1&quot;,\n  &quot;students&quot;: [\n    {\n      &quot;id&quot;: &quot;001&quot;,\n      &quot;name&quot;: &quot;li&quot;\n    },\n    {\n      &quot;id&quot;: &quot;002&quot;,\n      &quot;name&quot;: &quot;wang&quot;\n    }\n  ]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六、更新操作符" tabindex="-1"><a class="header-anchor" href="#六、更新操作符"><span>六、更新操作符</span></a></h3><ul><li><p><strong>set</strong></p><p>更新指令。用于设定字段等于指定值。这种方法相比传入纯 JS 对象的好处是能够指定字段等于一个对象：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;photo&#39;).doc(&#39;doc-id&#39;).update({\n  count: dbCmd.set({\n    fav: 1,\n    follow: 1\n  })\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;doc-id&quot;,\n  &quot;name&quot;: &quot;Hello&quot;,\n  &quot;count&quot;: {\n    &quot;fav&quot;: 0,\n    &quot;follow&quot;: 0\n  }\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;doc-id&quot;,\n  &quot;name&quot;: &quot;Hello&quot;,\n  &quot;count&quot;: {\n    &quot;fav&quot;: 1,\n    &quot;follow&quot;: 1\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>inc</strong></p><p>更新指令。用于指示字段自增某个值，这是个原子操作，使用这个操作指令而不是先读数据、再加、再写回的好处是：</p><ol><li>原子性：多个用户同时写，对数据库来说都是将字段加一，不会有后来者覆写前者的情况</li><li>减少一次请求：不需先读再写</li></ol><p>在文章阅读数+1、收藏+1等很多场景会用到它。如给收藏的商品数量加一：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;user&#39;).where({\n  _id: &#39;my-doc-id&#39;\n}).update({\n  count: {\n    fav: dbCmd.inc(1)\n  }\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;my-doc-id&quot;,\n  &quot;name&quot;: &quot;Hello&quot;,\n  &quot;count&quot;: {\n    &quot;fav&quot;: 0,\n    &quot;follow&quot;: 0\n  }\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;my-doc-id&quot;,\n  &quot;name&quot;: &quot;Hello&quot;,\n  &quot;count&quot;: {\n    &quot;fav&quot;: 1,\n    &quot;follow&quot;: 0\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>mul</strong></p><p>更新指令。用于指示字段自乘某个值。</p><p>以下示例将count内的fav字段乘10</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;user&#39;).where({\n  _id: &#39;my-doc-id&#39;\n}).update({\n  count: {\n    fav: dbCmd.mul(10)\n  }\n})\n更新前：fav:2 \n更新后：fav:20 \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>remove</strong></p><p>更新指令。用于表示删除某个字段。</p><p>如某人删除了自己一条商品评价中的评分：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;comments&#39;).doc(&#39;comment-id&#39;).update({\n  rating: dbCmd.remove()\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;rating&quot;: 5,\n  &quot;comment&quot;: &quot;xxx&quot;\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;comment&quot;: &quot;xxx&quot;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>push</strong></p><p>向数组尾部追加元素，支持传入单个元素或数组</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;comments&#39;).doc(&#39;comment-id&#39;).update({\n  // users: dbCmd.push(&#39;aaa&#39;)\n  users: dbCmd.push([&#39;c&#39;, &#39;d&#39;])\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;,&quot;b&quot;]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>pop</strong></p><p>删除数组尾部元素</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;comments&#39;).doc(&#39;comment-id&#39;).update({\n  users: dbCmd.pop()\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;,&quot;b&quot;]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>unshift</strong></p><p>向数组头部添加元素，支持传入单个元素或数组。使用同push</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;comments&#39;).doc(&#39;comment-id&#39;).update({\n  // users: dbCmd.push(&#39;aaa&#39;)\n  users: dbCmd.unshift([&#39;c&#39;, &#39;d&#39;])\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;,&quot;b&quot;]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;c&quot;,&quot;d&quot;,&quot;a&quot;,&quot;b&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>shift</strong></p><p>删除数组头部元素。使用同pop</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;comments&#39;).doc(&#39;comment-id&#39;).update({\n  users: dbCmd.shift()\n})\n// 更新前\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;,&quot;b&quot;]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;b&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>',23)],s={},t=(0,e(6262).A)(s,[["render",function(i,n){return(0,d.uX)(),(0,d.CE)("div",null,l)}]]),u=JSON.parse('{"path":"/markdown/%E5%89%8D%E7%AB%AF/UniCloud/%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3.html","title":"更新文档","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"一、更新指定文档","slug":"一、更新指定文档","link":"#一、更新指定文档","children":[]},{"level":3,"title":"二、更新文档，如果不存在则创建","slug":"二、更新文档-如果不存在则创建","link":"#二、更新文档-如果不存在则创建","children":[]},{"level":3,"title":"三、批量更新文档","slug":"三、批量更新文档","link":"#三、批量更新文档","children":[]},{"level":3,"title":"四、更新数组对象内指定下标的元素","slug":"四、更新数组对象内指定下标的元素","link":"#四、更新数组对象内指定下标的元素","children":[]},{"level":3,"title":"五、更新数组对象内匹配条件的元素","slug":"五、更新数组对象内匹配条件的元素","link":"#五、更新数组对象内匹配条件的元素","children":[]},{"level":3,"title":"六、更新操作符","slug":"六、更新操作符","link":"#六、更新操作符","children":[]}],"git":{},"filePathRelative":"markdown/前端/UniCloud/更新文档.md"}')}}]);