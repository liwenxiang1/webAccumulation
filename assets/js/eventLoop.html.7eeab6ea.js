"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[812],{765:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>c});var t=a(641);const p=[(0,t.Fv)('<h1 id="事件循环-event-loop-以及实例" tabindex="-1"><a class="header-anchor" href="#事件循环-event-loop-以及实例"><span>事件循环（Event Loop）以及实例</span></a></h1><p>大家都知道 js 是单线程的脚本语言，在同一时间只能做同一件事，为了协调时间，用户交互，脚本，UI 渲染和网络处理等行为，为了防止线程阻塞，Event Loop 应运而生</p><p><strong>为什么 js 是单线程的</strong> js 是运行在浏览器的脚本语言，js 的主要用途之一是操作 dom</p><p>举个例子，如果 js 有两个线程，同时操作同一个 dom，浏览器该怎么办呢？为了避免这种情况，js 必须是单线程的</p><h2 id="执行栈与任务队列" tabindex="-1"><a class="header-anchor" href="#执行栈与任务队列"><span>执行栈与任务队列</span></a></h2><p>因为 js 是单线程云烟，到遇到一步任务时，不可能一直等待一步完成，再进行下一步，这期间浏览器是空闲状态，这是对资源的浪费</p><h3 id="执行栈-调用栈" tabindex="-1"><a class="header-anchor" href="#执行栈-调用栈"><span>执行栈（调用栈）</span></a></h3><p>当执行某个函数、用户点击一次数遍，ajax 完成，一个图片加载完成等时间发生时，只要指定过回调函数，这些时间发生时就会进入执行栈队列中，等待主线程读取，遵循先进后出原则</p><h3 id="主线程" tabindex="-1"><a class="header-anchor" href="#主线程"><span>主线程</span></a></h3><p>主线程规定现在执行<code>执行栈</code>中的那个任务</p><p>主线程循环：即主线程会不停地从执行栈中读取事件，执行栈中的同步代码</p><p>当遇到一个异步事件后，也不会一直等待一不执行的返回结果，而是会挂载到执行队列中（Task Queue）</p><p><strong>当主线程执行完执行栈中所有的代码之后，回去查看任务队列中是否有任务</strong>。如果有，主线正会一次执行任务队列中的回调函数</p><p><strong>代码示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;任务队列函数1&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a的for循环&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a事件执行完&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;任务队列函数2&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b的for循环&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b事件执行完&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token function-variable function">c</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;任务队列函数3&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;c的for循环&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;c事件执行完&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 当a、b、c函数都执行完成之后，三个setTimeout才会依次执行</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js-异步运行机制" tabindex="-1"><a class="header-anchor" href="#js-异步运行机制"><span>js 异步运行机制</span></a></h3><ol><li>所有任务都在主线程上执行，行程一个执行栈</li><li>主线程之外还有一个“任务队列”只要一步任务有了结果，就会在“任务队列”中防止一个时间</li><li>一旦“执行栈”中所有的任务执行完毕，系统就会读取“任务队列”。那些对应的异步任务，结束等待状态，进入执行栈并开始执行</li></ol><h3 id="宏任务与微任务" tabindex="-1"><a class="header-anchor" href="#宏任务与微任务"><span>宏任务与微任务</span></a></h3><p>异步任务分为宏任务和微任务</p><p><strong>宏任务</strong></p><p>script(整体代码)，setTimeout,setInterval,Ui 渲染，I/O，postMessage,MessageChannel,setImmediate</p><p><strong>微任务</strong></p><p>Promise、mutationObserve、process.nextTick</p><h3 id="event-loop-事件循环" tabindex="-1"><a class="header-anchor" href="#event-loop-事件循环"><span>Event Loop（事件循环）</span></a></h3><p>Event Loop 中每一次循环成为 tick,每一次 tick 的任务如下</p><ul><li>执行栈选择最先进入队列的宏任务（通常是<code>script</code>整体代码），如果有则执行</li><li>检查是否存在微任务，如果存在则不停执行，直至清空微任务队列</li><li>更新 render（每一次时间循环，浏览器都会去更新重新渲染）</li><li>重复以上步骤</li></ul><p>宏任务 &gt; 所有微任务 &gt; 宏任务</p>',27)],o={},e=(0,a(262).A)(o,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,p)}]]),c=JSON.parse('{"path":"/accumulation/eventLoop.html","title":"事件循环（Event Loop）以及实例","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"执行栈与任务队列","slug":"执行栈与任务队列","link":"#执行栈与任务队列","children":[{"level":3,"title":"执行栈（调用栈）","slug":"执行栈-调用栈","link":"#执行栈-调用栈","children":[]},{"level":3,"title":"主线程","slug":"主线程","link":"#主线程","children":[]},{"level":3,"title":"js 异步运行机制","slug":"js-异步运行机制","link":"#js-异步运行机制","children":[]},{"level":3,"title":"宏任务与微任务","slug":"宏任务与微任务","link":"#宏任务与微任务","children":[]},{"level":3,"title":"Event Loop（事件循环）","slug":"event-loop-事件循环","link":"#event-loop-事件循环","children":[]}]}],"git":{"updatedTime":1709731854000,"contributors":[{"name":"“liwx”","email":"“1258598654qq.com”","commits":1}]},"filePathRelative":"accumulation/eventLoop.md"}')}}]);