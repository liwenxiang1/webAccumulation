"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[5096],{6105:(e,i,n)=>{n.r(i),n.d(i,{comp:()=>y,data:()=>I});var l=n(641);const d=(0,l.Lk)("h1",{id:"vue3-ts-vite知识",tabindex:"-1"},[(0,l.Lk)("a",{class:"header-anchor",href:"#vue3-ts-vite知识"},[(0,l.Lk)("span",null,"vue3+ts+vite知识")])],-1),s=(0,l.Lk)("h3",{id:"一、vue3常用的知识",tabindex:"-1"},[(0,l.Lk)("a",{class:"header-anchor",href:"#一、vue3常用的知识"},[(0,l.Lk)("span",null,"一、vue3常用的知识")])],-1),a=(0,l.Fv)('<li>1.按钮跳转死路由可以直接使用<code>router-link</code>标签，否则只能通过下面的代码实现路由跳转<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import {useRouter} from &#39;vue-router&#39;;\nconst router = useRouter()\nrouter.push({path: &#39;/home&#39;})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>2.0 父组件-&gt;子组件传参实现，子组件回传参数给父组件<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// ========子组件SignView.vue========\nimport {reactive} from &quot;vue&quot;;\nconst props = defineProps({\n  signing: {//正在签署中\n    type: Boolean,\n    default: false\n  },\n  backData: {//返回结果\n    type: Function\n  },\n})\nconst xxx=()=&gt;{\n  props.backData(aaa)\n}\n&lt;div v-if=&quot;!props.signing&quot;&gt;\n// ========父组件========\n&lt;sign-view :signing=&quot;data.signing&quot; :backData=&quot;(val)=&gt;state.adbValid=val&quot;&gt;&lt;/sign-view&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>2.1父组件调用子组件的方法：<code>defineExpose({ getDeviceInfo})</code>、<code>ref=&quot;deviceInfoView&quot;</code>、<code>deviceInfoView.value.getDeviceInfo()</code><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//========子组件：DeviceInfo.vue========\nimport {reactive} from &quot;vue&quot;;\nconst getDeviceInfo = async () =&gt; { ... }\ndefineExpose({\n  getDeviceInfo,\n})\n\n//========父组件：logcat.vue========\nimport { ref } from &#39;vue&#39;\nimport DeviceInfo from &quot;../../../components/adb/DeviceInfo.vue&quot;;\nconst deviceInfoView: any = ref&lt;InstanceType&lt;typeof DeviceInfo&gt;&gt;();\n\nconst xxx=()=&gt;{\n  deviceInfoView.value.getDeviceInfo()\n}\n&lt;device-info ref=&quot;deviceInfoView&quot;&gt;&lt;/device-info&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>2.2组件的<code>v-model</code>实现：<code>emit(&#39;update:modelValue&#39;, false)</code>、<code>props.modelValue</code>。 如果在子组件内继续使用<code>v-model=&#39;props.modelValue&#39;</code>的话会警告甚至报错。<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// ========子组件 child========\nimport {defineEmits} from &quot;vue&quot;;\n//定义向父组件回传的方法\nlet emit = defineEmits([&#39;update:modelValue&#39;])\n//定义对外的属性名\nconst props = defineProps({\n  modelValue: {//显示，隐藏弹窗。v-model传入的数据\n    type: Boolean,\n    default: false,\n  }\n})\n//调用回传方法修改源数据\nconst closeDialog = (name) =&gt; {\n  ...\n  emit(&#39;update:modelValue&#39;, false)\n}\n\n// ========父组件========\n&lt;child v-model=&quot;state.showDeviceStorageDialog&quot;&gt;&lt;/child&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>2.3组件的<code>v-model</code>实现：在上面的基础上使用<code>computed</code>对象的<code>get</code>、<code>set</code>方法使用<code>props.modelValue</code> 就可以在子组件内继续使用<code>v-model=&#39;computedValue&#39;</code>了。<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//只需要定义一个computed生成的变量，定义get方法绑定props.modelValue的值，set方法使用emit回传修改的值。\nimport {computed,defineEmits} from &quot;vue&quot;;\n//定义向父组件回传的方法\nlet emit = defineEmits([&#39;update:modelValue&#39;])\n//定义对外的属性名\nconst props = defineProps({\n  modelValue: {//显示，隐藏弹窗。v-model传入的数据\n    type: Boolean,\n    default: false,\n  }\n})\nconst computedValue = computed({\n    get() {\n      return props.modelValue;\n    },\n    set(value) {\n      emit(&#39;update:modelValue&#39;, value)\n    }\n  }\n)\n# 子组件内继续使用computedValue变量\n&lt;van-field v-model=&quot;computedValue&quot;&gt;&lt;/van-field&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>3.<code>watch</code>方法使用（第一次渲染页面watch并不会触发），<code>watchEffect</code>使用（第一次进入就会触发）<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//不加 flush: &#39;post&#39;的话，watch监听是在Dom元素更新之前执行的。加上的话就是Dom元素更新之后执行的。\nwatch(source, callback, {\n  flush: &#39;post&#39;\n})\nwatchEffect(callback, {\n  flush: &#39;post&#39;\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import {watch,watchEffect} from &quot;vue&quot;;\nwatch(\n  () =&gt; props.modelValue,\n  async (newVal, oldVal) =&gt; {\n    console.log(&quot;watch=====&gt;&quot;, newVal)\n    if (newVal) {\n      state.selectMode.selectDir = &#39;&#39;//显示弹窗的时候就重置selectPackageName这个字段\n      resetQuery()\n    }\n  }\n)\n# 另一种写法\nconst message = ref(&quot;小猪课堂&quot;);\nconst newMessage = computed(() =&gt; {\n  return message.value;\n});\nconst number = reactive({ count: 0 });\n\nwatch(message, (newValue, oldValue) =&gt; {...});\nwatch(newMessage, (newValue, oldValue) =&gt; {...});\nwatch(number, (newValue, oldValue) =&gt; {...}); //已经实现了深度监听\nwatch(() =&gt; number,(newValue, oldValue) =&gt; {...},{ deep: true }); //使用 getter 函数返回了响应式对象，需要手动添加深度监听\nwatch(() =&gt; number.count,(newValue, oldValue) =&gt; {...});\nwatch([message, () =&gt; number.count], (newValue, oldValue) =&gt; {...});\n\n# watchEffect使用\nwatchEffect(()=&gt;{\n  console.log(&quot;新的值:&quot;, number.count);\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>4.<code>computed</code>方法使用<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import {computed, ComputedRef} from &quot;vue&quot;;\n\nconst filterStorageDirs: ComputedRef&lt;Array&lt;any&gt;&gt; = computed(() =&gt; {\n  return state.storageDirs.filter(item =&gt; item.name.toLowerCase().indexOf(state.searchValue) != -1)\n})\nconst adbEnvInfo = computed(() =&gt; {\n  return state.adbInfo.adbValid ? &quot;项目adb环境正常！&quot; : &quot;项目adb环境错误！&quot;\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>5.<code>onMounted</code>生命周期使用<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import {onMounted} from &quot;vue&quot;;\nonMounted(async () =&gt; {\n  await initLocalSaveDirEnv()\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>6.图片资源使用<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//一、动态使用\nconst getPhoneIcon = (value) =&gt; {\n  return new URL(`../../assets/img/selectPhoneBrand/icon_${value}.png`, import.meta.url).href\n}\n\n//二、动态引用\nimport right_icon_available from &quot;../../../assets/img/installSteps/right_icon_available.png&quot;\nimport right_icon_disable from &quot;../../../assets/img/installSteps/right_icon_disable.png&quot;\n\nconst nextImageBtnSrc = computed(() =&gt; {\n  return data.currentImageIndex &gt;= data.currentPhoneResource.length - 1 ? right_icon_disable : right_icon_available\n})\n\n//三、获取目录下的所有文件\nconst resource0 = import.meta.glob(&#39;/src/assets/img/installSteps/step1/resource0/*.png&#39;)\nconst resource0Imgs=Object.keys(resource0)\n\n//四、动态样式background-image使用\nconst currentPhoneImageStyle = computed(() =&gt; {\n  let url = data.currentPhoneResource.length &amp;&amp; data.currentPhoneResource[data.currentImageIndex]\n  let style = {backgroundImage: &#39;url(&#39; + `${url}` + &#39;)&#39;}\n  return style\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>7.使用指令功能实现一个防止多次点击的功能<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//一、在全局样式中定义禁用类样式\n.disabled-class {\n  pointer-events: none;\n}\n//二、给`vue`对象添加禁用指令\n# global_utils.ts\nexport default {\n  //自定义节流操作\n  ReClick: {\n    mounted(el: any, binding: any) {\n      // console.log(&quot;ReClick==&gt;&quot;, el, binding)\n      // console.log(&quot;ReClick==&gt;&quot;, el.className, binding)\n      el.addEventListener(&#39;click&#39;, () =&gt; {\n        console.log(&quot;ReClick==&gt;&quot;, binding.value)\n        console.log(&quot;ReClick==&gt;&quot;, el.disabled)\n        if (el.className.indexOf(&#39;disabled-class&#39;) == -1) {\n          el.className = el.className + &quot; disabled-class&quot;;\n          setTimeout(() =&gt; {\n            el.className = el.className.replace(&quot; disabled-class&quot;, &quot;&quot;)\n          }, binding.value || 1200)\n        }\n      })\n    }\n  }\n}\n# main.ts\nimport global_utils from &quot;./utils/global_utils&quot;;\napp.directive(&#39;reclick&#39;, global_utils.ReClick);\n//三、禁用指令的使用\n&lt;van-button v-reclick&gt;&lt;/van-button&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>8.使用<code>store</code>数据缓存，使用的库是：<code>pinia</code><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 第一步：添加 pinia 依赖\n\n# 第二步：在main.ts中使用 pinia\n\nimport {createPinia} from &#39;pinia&#39;\nlet app = createApp(App)\napp.use(createPinia())\n\n# 第三步：全局创建 store 对象并添加想要的 store属性\n// store/app.ts - store具体的模块里面的代码\nimport {defineStore} from &#39;pinia&#39;\n\nexport const appStore = defineStore(&#39;app&#39;, {\n  state: () =&gt; ({\n    token: &quot;&quot;,\n    phoneBrand: &quot;&quot;,//手机型号\n    installStepIndex: 0,//安装步骤编号\n  }),\n  actions: {\n    setPhoneBrand(val: any) {\n      this.phoneBrand = val\n    },\n    setInstallStepIndex(val: any) {\n      this.installStepIndex = val\n    }\n  }\n})\n\n// store/index.ts - 创建全局的store对象，添加对应模块的属性\nimport { appStore } from &#39;./app&#39;\nconst store: any = {}\nexport const registerStore = () =&gt; {\n    store.appStore = appStore()\n}\nexport default store\n\n// main.ts - 在main.ts代码执行入口处注册 store 对象\nimport {registerStore} from &#39;./store&#39;\nregisterStore()\n\n# 第四步：在代码中的具体使用\nimport store from &quot;../../store&quot;;\nstore.appStore.setPhoneBrand(selectPhoneType)\nconsole.log(&quot;phoneBrand==&gt;&quot;, store.appStore.phoneBrand)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>',11),t=(0,l.Lk)("code",null,"axios",-1),r={href:"/markdown/code/UEMActivate/src/renderer/src/api/user/index.ts",target:"_blank",rel:"noopener noreferrer"},v={href:"/markdown/code/UEMActivate/src/renderer/src/utils/request/index.ts",target:"_blank",rel:"noopener noreferrer"},c=(0,l.Fv)('<h3 id="二、vue3遇到的问题" tabindex="-1"><a class="header-anchor" href="#二、vue3遇到的问题"><span>二、vue3遇到的问题</span></a></h3><ul><li>1.打印<code>reactive</code>的数据，显示的都是<code>Proxy</code>的信息。需要使用下面的方法打印<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>console.log(JSON.parse(JSON.stringfy(xxx)))\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>2.xxx</li></ul><h3 id="三、typescript的知识" tabindex="-1"><a class="header-anchor" href="#三、typescript的知识"><span>三、typescript的知识</span></a></h3><p>typescript和JavaScript用法基本一样，正常使用即可。在需要关心数据类型的地方可以定义具体的数据类型。</p><ul><li>1.<code>type</code>和<code>interface</code>功能基本一样的，写法有点区别<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># interface使用\nexport interface IMsg {\n  source: string\n  user_id: number\n  create_time: Date\n}\n# type使用\nexport type INewUser = {\n  id: number,\n  username: string,\n}\ntype ISearch = {\n  join: string,\n  sql: &#39;&#39;,\n}\nexport type IWhere = {\n  user: INewUser\n  search: ISearch\n}\n# 具体引用后的使用\nsqlitePlugin.deleteSqliteDataRender({user: {id: item.id}} as IWhere)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="四、electron的知识" tabindex="-1"><a class="header-anchor" href="#四、electron的知识"><span>四、electron的知识</span></a></h3><p>有三层分别为：<code>main</code>主进程，<code>preload</code>中间层，<code>render</code>渲染层。</p><ul><li>1.主进程相当于是<code>nodejs</code>服务层，可以调用pc系统的一些功能如：文件系统，命令行功能等。</li><li>2.中间层可以调用主进程和渲染层的东西。因为渲染层是使用的vue框架，所以不直接调用渲染层。</li></ul><blockquote><p>因为渲染层使用vue框架，调用渲染层的东西比较麻烦。所以常用的调用顺序都是：【render层】-&gt;【preload层】-&gt;【main层】</p></blockquote><p><strong>知识点介绍</strong></p>',10),u={href:"/markdown/code/UEMActivate/src/main/adb.ts",target:"_blank",rel:"noopener noreferrer"},o=(0,l.Lk)("code",null,"main/index.ts",-1),m={href:"/markdown/code/UEMActivate/src/preload/adbApi.ts",target:"_blank",rel:"noopener noreferrer"},b=(0,l.Lk)("code",null,"preload/index.ts",-1),p={href:"/markdown/code/UEMActivate/src/renderer/src/utils/plugin.ts",target:"_blank",rel:"noopener noreferrer"},g={href:"/markdown/code/UEMActivate/src/renderer/src/components/adb/ApkAction.vue",target:"_blank",rel:"noopener noreferrer"},x=(0,l.Fv)('<li>5.想要隐藏应用的菜单栏，网上说用<code>Menu.setApplicationMenu(null)</code>但是不管用。通过下面的代码实现了<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const mainWindow = new BrowserWindow({\n  ...\n  titleBarStyle: &#39;hidden&#39;,//隐藏title标题栏\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>6.如果在render层动态加载系统的文件的时候，应该加载使用main层的 <code>fs.readFileSync(filePath)</code>读取到的数据，而不是直接加载本地文件的路径。<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//main层读取文件\nclass ZipPlugin {\n  ...\n  readFileBase64Main(filePath) {\n    const result = fs.readFileSync(filePath);\n    console.log(&quot;readFileBase64==&gt;&quot;, result)\n    return result.toString(&#39;base64&#39;)\n  }\n}\n\n//render层使用文件的base64字符串加载本地资源\nconst previewFile = async (item) =&gt; {\n  ...\n  let result = await window.zipApi.readFileBase64Preload(state.previewInfo.localFilePath)\n  state.previewInfo.localFileBase64 = &quot;data:image/jpg;base64,&quot; + result\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>7.安装应用时，将项目中的文件复制到应用的安装目录中，根据项目框架的区别配置的地方不一样。 <ul><li>1.针对普通的electron项目，具体看运行的命令里面的<code>--config</code>配置的是哪个配置文件<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// build.config.win.js 或者 build.config.js\nconst config={\n  extraResources:{\n    &quot;from&quot;: &quot;./resource/adb_win32&quot;,\n    &quot;to&quot;: &quot;adb&quot;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>2.针对<code>vite-electron</code>框架的项目，框架里面配置的打包的配置文件是<code>electron-builder.yml</code><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>extraResources:\n  - from: ./doc/adb_win32\n    to: adb_win32\n  - from: ./doc/data.db\n    to: data.db\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>8.在main层判断环境的信息<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import {app} from &#39;electron&#39;\nconst isBuild = app.isPackaged;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>9.配置<code>electron</code>安装包自定义安装目录，<code>electron-builder.yml</code>中配置<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>nsis:\n  oneClick: false\n  allowToChangeInstallationDirectory: true\n\n# 具体介绍：\noneClick：值为布尔类型，true时代表一键安装，false代表一步步安装\n\nperMachine：值为布尔类型，代表是否显示辅助安装程序的安装模式安装程序页面（选择按机器还是按用户）。true时代表始终按用户安装。\n\nallowToChangeInstallationDirectory：值为布尔类型，是否允许用户修改安装目录，true为允许，false为不允许\n\ndisplayLanguageSelector：布尔类型，是否允许选择语言(默认为系统语言)，true为允许，false为不允许\n\nlanguage：字符串类型，默认语言\n\nguid：字符串类型，为应用软件指定guid，此guid会存放在注册表中，如果没有指定则系统会自动生成\n\ncreateDesktopShortcut：布尔类型或&quot;always&quot;，是否创建桌面快捷方式，true时表示创建，false表示不创建，&quot;always&quot;代表重新安装时也创建\n\ninclude：字符串类型，NSIS包含定制安装程序脚本的路径\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>10.针对<code>vite-electron</code>框架的项目的<code>main</code>层的热更新。在<code>package.json</code>中的<code>scripts</code>里面的命令里面添加<code>--watch</code>。<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># package.json\n{\n  &quot;scripts&quot;: {\n    ...\n    &quot;dev&quot;: &quot;electron-vite dev --watch&quot;,\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>',6),h=(0,l.Lk)("code",null,"main",-1),f={href:"/markdown/code/UEMActivate/src/main/adb.ts",target:"_blank",rel:"noopener noreferrer"},q=(0,l.Fv)('<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 使用electron自带的选择文件或者文件路径弹窗\n# 选择文件弹窗\nimport {app, dialog, ipcMain} from &#39;electron&#39;\ndialog.showOpenDialog({\n  title: &quot;选择文件&quot;,\n  properties: [&quot;openFile&quot;],\n  filters: [{name: &quot;zip&quot;, extensions: [&quot;zip&quot;]}],\n} as OpenDialogOptions).then(result =&gt; {\n  console.log(result.filePaths[0])\n  if (result.filePaths.length) return this._unzipFile(result.filePaths[0], savePath);\n  else return {}\n})\n\n# 选择文件夹路径\nlet {filePaths} = await dialog.showOpenDialog({\n  title: &#39;选择文件夹&#39;,\n  defaultPath: path.join(__dirname, &#39;&#39;),\n  properties: [&#39;openDirectory&#39;]\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),k=(0,l.Fv)('<li>12.关于<code>electron</code>的<code>.ico</code>应用图标的制作，使用的是<code>electron-icon-builder</code>库然后执行相应的命令生成。<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># package.json\n{\n  &quot;script&quot;:{\n    ...\n    &quot;build-icon&quot;: &quot;electron-icon-builder --input=./resources/icon.png --output=build --flatten&quot;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>',1),w={},y=(0,n(6262).A)(w,[["render",function(e,i){const n=(0,l.g2)("ExternalLinkIcon");return(0,l.uX)(),(0,l.CE)("div",null,[d,s,(0,l.Lk)("ul",null,[a,(0,l.Lk)("li",null,[(0,l.eW)("9.关于"),t,(0,l.eW)("的使用参考："),(0,l.Lk)("a",r,[(0,l.eW)("render-api"),(0,l.bF)(n)]),(0,l.eW)("、"),(0,l.Lk)("a",v,[(0,l.eW)("render-request"),(0,l.bF)(n)])])]),c,(0,l.Lk)("ul",null,[(0,l.Lk)("li",null,[(0,l.eW)("1.关于main层的代码参考："),(0,l.Lk)("a",u,[(0,l.eW)("main-adb.ts"),(0,l.bF)(n)]),(0,l.eW)("，需要在"),o,(0,l.eW)("中引入")]),(0,l.Lk)("li",null,[(0,l.eW)("2.关于preload层的代码参考："),(0,l.Lk)("a",m,[(0,l.eW)("preload-adbApi.ts"),(0,l.bF)(n)]),(0,l.eW)("，需要在"),b,(0,l.eW)("中注册")]),(0,l.Lk)("li",null,[(0,l.eW)("3.关于render层的代码参考："),(0,l.Lk)("a",p,[(0,l.eW)("render-plugin.ts"),(0,l.bF)(n)]),(0,l.eW)("，在具体页面中可以使用。")]),(0,l.Lk)("li",null,[(0,l.eW)("4.关于在render-vue层的代码参考："),(0,l.Lk)("a",g,[(0,l.eW)("render-vue-ApkAction.vue"),(0,l.bF)(n)])]),x,(0,l.Lk)("li",null,[(0,l.eW)("11.main层功能示例。更多关于"),h,(0,l.eW)("层操作文件或者其他功能参考："),(0,l.Lk)("a",f,[(0,l.eW)("main-adb.ts"),(0,l.bF)(n)]),(0,l.eW)("及其他代码。"),q]),k])])}]]),I=JSON.parse('{"path":"/markdown/%E5%89%8D%E7%AB%AF/vue/vue3_ts_vite_electron%E7%9F%A5%E8%AF%86.html","title":"vue3+ts+vite知识","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"一、vue3常用的知识","slug":"一、vue3常用的知识","link":"#一、vue3常用的知识","children":[]},{"level":3,"title":"二、vue3遇到的问题","slug":"二、vue3遇到的问题","link":"#二、vue3遇到的问题","children":[]},{"level":3,"title":"三、typescript的知识","slug":"三、typescript的知识","link":"#三、typescript的知识","children":[]},{"level":3,"title":"四、electron的知识","slug":"四、electron的知识","link":"#四、electron的知识","children":[]}],"git":{},"filePathRelative":"markdown/前端/vue/vue3+ts+vite+electron知识.md"}')}}]);