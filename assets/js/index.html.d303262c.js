"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[4470],{389:(e,t,d)=>{d.r(t),d.d(t,{comp:()=>a,data:()=>l});var n=d(641);const i={},a=(0,d(6262).A)(i,[["render",function(e,t){return(0,n.uX)(),(0,n.CE)("div")}]]),l=JSON.parse('{"path":"/accumulation/","title":"","lang":"zh-CN","frontmatter":{},"headers":[],"git":{},"filePathRelative":"accumulation/README.md"}')},1864:(e,t,d)=>{d.r(t),d.d(t,{comp:()=>l,data:()=>s});var n=d(641);const i=[(0,n.Lk)("h1",{id:"前端算法",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#前端算法"},[(0,n.Lk)("span",null,"前端算法")])],-1),(0,n.Lk)("p",null,"这个部分主要记录了一些算法题, 文档会将算法按照难度分级，代码中都有详细注释，且会提供多种解法",-1)],a={},l=(0,d(6262).A)(a,[["render",function(e,t){return(0,n.uX)(),(0,n.CE)("div",null,i)}]]),s=JSON.parse('{"path":"/algorithm/","title":"前端算法","lang":"zh-CN","frontmatter":{},"headers":[],"git":{},"filePathRelative":"algorithm/index.md"}')},6618:(e,t,d)=>{d.r(t),d.d(t,{comp:()=>a,data:()=>l});var n=d(641);const i={},a=(0,d(6262).A)(i,[["render",function(e,t){return(0,n.uX)(),(0,n.CE)("div")}]]),l=JSON.parse('{"path":"/","title":"Home","lang":"zh-CN","frontmatter":{"home":true,"title":"Home","heroImage":"https://vuejs.press/images/hero.png","actions":[{"text":"开始阅读","link":"/getting-started.html","type":"primary"}],"features":null,"footer":"MIT Licensed | Copyright © 2018-present Li-wx"},"headers":[],"git":{},"filePathRelative":"README.md"}')},214:(e,t,d)=>{d.r(t),d.d(t,{comp:()=>l,data:()=>s});var n=d(641);const i=[(0,n.Fv)('<h1 id="unicloud数据库操作文档" tabindex="-1"><a class="header-anchor" href="#unicloud数据库操作文档"><span>UniCloud数据库操作文档</span></a></h1><ul><li><p>一、对集合<code>Collection</code>的操作</p><p>通过 <code>db.collection(name)</code> 可以获取指定集合的引用，在集合上可以进行以下操作</p></li></ul><table><thead><tr><th>类型</th><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>写</td><td>[add</td><td>新增记录（触发请求）</td></tr><tr><td>计数</td><td>count</td><td>获取符合条件的记录条数</td></tr><tr><td>读</td><td>get</td><td>获取集合中的记录，如果有使用 where 语句定义查询条件，则会返回匹配结果集 (触发请求)</td></tr><tr><td>引用</td><td>doc</td><td>获取对该集合中指定 id 的记录的引用</td></tr><tr><td>查询条件</td><td>where</td><td>通过指定条件筛选出匹配的记录，可搭配查询指令（eq, gt, in, ...）使用</td></tr><tr><td></td><td>skip</td><td>跳过指定数量的文档，常用于分页，传入 offset</td></tr><tr><td></td><td>orderBy</td><td>排序方式</td></tr><tr><td></td><td>limit</td><td>返回的结果集(文档数量)的限制，有默认值和上限值</td></tr><tr><td></td><td>field</td><td>指定需要返回的字段</td></tr></tbody></table><pre><code>&gt; 查询及更新指令用于在 `where` 中指定字段需满足的条件，指令可通过 `db.command` 对象取得。\n</code></pre><ul><li><p>二、 记录 Record / Document</p><blockquote><p>通过 <code>db.collection(collectionName).doc(docId)</code> 可以获取指定集合上指定 id 的记录的引用，在记录上可以进行以下操作</p></blockquote></li></ul><table><thead><tr><th>接口</th><th>说明</th><th></th></tr></thead><tbody><tr><td>写</td><td>set</td><td>覆写记录</td></tr><tr><td></td><td>update</td><td>局部更新记录(触发请求)</td></tr><tr><td></td><td>remove</td><td>删除记录(触发请求)</td></tr><tr><td>读</td><td>get</td><td>获取记录(触发请求)</td></tr></tbody></table><ul><li><p>三、查询筛选指令 Query Command</p><blockquote><p>以下指令挂载在 <code>db.command</code> 下</p></blockquote></li></ul><table><thead><tr><th>类型</th><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>比较运算</td><td>eq</td><td>字段等于 ==</td></tr><tr><td></td><td>neq</td><td>字段不等于 !=</td></tr><tr><td></td><td>gt</td><td>字段大于 &gt;</td></tr><tr><td></td><td>gte</td><td>字段大于等于 &gt;=</td></tr><tr><td></td><td>lt</td><td>字段小于 &lt;</td></tr><tr><td></td><td>lte</td><td>字段小于等于 &lt;=</td></tr><tr><td></td><td>in</td><td>字段值在数组里</td></tr><tr><td></td><td>nin</td><td>字段值不在数组里</td></tr><tr><td>逻辑运算</td><td>and</td><td>表示需同时满足指定的所有条件</td></tr><tr><td></td><td>or</td><td>表示需同时满足指定条件中的至少一个</td></tr></tbody></table><ul><li><p>四、字段更新指令 Update Command</p><blockquote><p>以下指令挂载在 <code>db.command</code> 下</p></blockquote></li></ul><table><thead><tr><th>类型</th><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>字段</td><td>set</td><td>设置字段值</td></tr><tr><td></td><td>remove</td><td>删除字段</td></tr><tr><td></td><td>inc</td><td>加一个数值，原子自增</td></tr><tr><td></td><td>mul</td><td>乘一个数值，原子自乘</td></tr><tr><td></td><td>push</td><td>数组类型字段追加尾元素，支持数组</td></tr><tr><td></td><td>pop</td><td>数组类型字段删除尾元素，支持数组</td></tr><tr><td></td><td>shift</td><td>数组类型字段删除头元素，支持数组</td></tr><tr><td></td><td>unshift</td><td>数组类型字段追加头元素，支持数组</td></tr></tbody></table><h2 id="新增文档" tabindex="-1"><a class="header-anchor" href="#新增文档"><span>新增文档</span></a></h2><h3 id="方法1-collection-add-data" tabindex="-1"><a class="header-anchor" href="#方法1-collection-add-data"><span>方法1： collection.add(data)</span></a></h3><p>参数说明</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>object</td><td>array</td><td>是</td></tr></tbody></table><p>响应参数</p><p>1.单条插入时</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>插入记录的id</td></tr></tbody></table><p>2.批量插入时</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>inserted</td><td>Number</td><td>插入成功条数</td></tr><tr><td>ids</td><td>Array</td><td>批量插入所有记录的id</td></tr></tbody></table><h2 id="删除文档" tabindex="-1"><a class="header-anchor" href="#删除文档"><span>删除文档</span></a></h2><h3 id="方式1-通过指定文档id删除" tabindex="-1"><a class="header-anchor" href="#方式1-通过指定文档id删除"><span>方式1 通过指定文档ID删除</span></a></h3><p>collection.doc(_id).remove()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 清理全部数据\nlet res = await collection.get()\nres.data.map(async(document) =&gt; {\n  return await collection.doc(document.id).remove();\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式2-条件查找文档然后直接批量删除" tabindex="-1"><a class="header-anchor" href="#方式2-条件查找文档然后直接批量删除"><span>方式2 条件查找文档然后直接批量删除</span></a></h3><p>collection.where().remove()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 删除字段a的值大于2的文档\nconst dbCmd = db.command\nlet res = await collection.where({\n  a: dbCmd.gt(2)\n}).remove()\n\n// 清理全部数据\nconst dbCmd = db.command\nlet res = await collection.where({\n  _id: dbCmd.exists(true)\n}).remove()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更新文档" tabindex="-1"><a class="header-anchor" href="#更新文档"><span>更新文档</span></a></h2><h3 id="一、更新指定文档" tabindex="-1"><a class="header-anchor" href="#一、更新指定文档"><span>一、更新指定文档</span></a></h3><p>collection.doc().update(Object data)</p><p>参数说明</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>object</td><td>是</td><td>更新字段的Object，{&#39;name&#39;: &#39;Ben&#39;} _id 非必填</td></tr></tbody></table><p>响应参数</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>updated</td><td>Number</td><td>更新成功条数，数据更新前后没变化时会返回0</td></tr></tbody></table><p>更新数组时，已数组下标作为key即可</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>比如以下示例将数组arr内下标为1的值修改为 uniCloud\nlet res = await collection.doc(&#39;doc-id&#39;).update({\n  arr: {\n    1: &quot;uniCloud&quot;\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、更新文档-如果不存在则创建" tabindex="-1"><a class="header-anchor" href="#二、更新文档-如果不存在则创建"><span>二、更新文档，如果不存在则创建</span></a></h3><p>collection.doc().set()</p><p><strong>注意：</strong> 此方法会覆写已有字段，</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await collection.doc(&#39;doc-id&#39;).set({\n  name: &quot;Hey&quot;\n})\n// 更新前\n{\n  &quot;_id&quot;: &quot;doc-id&quot;,\n  &quot;name&quot;: &quot;Hello&quot;,\n  &quot;value&quot;: &quot;World&quot;\n}\n// 更新后\n{\n  &quot;_id&quot;: &quot;doc-id&quot;,\n  &quot;name&quot;: &quot;Hey&quot;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、批量更新文档" tabindex="-1"><a class="header-anchor" href="#三、批量更新文档"><span>三、批量更新文档</span></a></h3><p>collection.update()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await collection.where({name: dbCmd.eq(&#39;hey&#39;)}).update({\n  age: 18,\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、更新数组对象内指定下标的元素" tabindex="-1"><a class="header-anchor" href="#四、更新数组对象内指定下标的元素"><span>四、更新数组对象内指定下标的元素</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const res = await db.collection(&#39;query&#39;).doc(&#39;1&#39;).update({\n  // 更新students[1]\n  [&#39;students.&#39; + 1]: {\n    name: &#39;wang&#39;\n  }\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;1&quot;,\n  &quot;students&quot;: [\n    {\n      &quot;name&quot;: &quot;zhang&quot;\n    },\n    {\n      &quot;name&quot;: &quot;li&quot;\n    }\n  ]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;1&quot;,\n  &quot;students&quot;: [\n    {\n      &quot;name&quot;: &quot;zhang&quot;\n    },\n    {\n      &quot;name&quot;: &quot;wang&quot;\n    }\n  ]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、更新数组对象内匹配条件的元素" tabindex="-1"><a class="header-anchor" href="#五、更新数组对象内匹配条件的元素"><span>五、更新数组对象内匹配条件的元素</span></a></h3><p>注意：只可确定数组内只会被匹配到一个的时候使用</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const res = await db.collection(&#39;query&#39;).where({\n    &#39;students.id&#39;: &#39;001&#39;\n}).update({\n  // 将students内id为001的name改为li\n    &#39;students.$.name&#39;: &#39;li&#39;\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;1&quot;,\n  &quot;students&quot;: [\n    {\n      &quot;id&quot;: &quot;001&quot;,\n      &quot;name&quot;: &quot;zhang&quot;\n    },\n    {\n      &quot;id&quot;: &quot;002&quot;,\n      &quot;name&quot;: &quot;wang&quot;\n    }\n  ]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;1&quot;,\n  &quot;students&quot;: [\n    {\n      &quot;id&quot;: &quot;001&quot;,\n      &quot;name&quot;: &quot;li&quot;\n    },\n    {\n      &quot;id&quot;: &quot;002&quot;,\n      &quot;name&quot;: &quot;wang&quot;\n    }\n  ]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六、更新操作符" tabindex="-1"><a class="header-anchor" href="#六、更新操作符"><span>六、更新操作符</span></a></h3><ul><li><p><strong>set</strong></p><p>更新指令。用于设定字段等于指定值。这种方法相比传入纯 JS 对象的好处是能够指定字段等于一个对象：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;photo&#39;).doc(&#39;doc-id&#39;).update({\n  count: dbCmd.set({\n    fav: 1,\n    follow: 1\n  })\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;doc-id&quot;,\n  &quot;name&quot;: &quot;Hello&quot;,\n  &quot;count&quot;: {\n    &quot;fav&quot;: 0,\n    &quot;follow&quot;: 0\n  }\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;doc-id&quot;,\n  &quot;name&quot;: &quot;Hello&quot;,\n  &quot;count&quot;: {\n    &quot;fav&quot;: 1,\n    &quot;follow&quot;: 1\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>inc</strong></p><p>更新指令。用于指示字段自增某个值，这是个原子操作，使用这个操作指令而不是先读数据、再加、再写回的好处是：</p><ol><li>原子性：多个用户同时写，对数据库来说都是将字段加一，不会有后来者覆写前者的情况</li><li>减少一次请求：不需先读再写</li></ol><p>在文章阅读数+1、收藏+1等很多场景会用到它。如给收藏的商品数量加一：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;user&#39;).where({\n  _id: &#39;my-doc-id&#39;\n}).update({\n  count: {\n    fav: dbCmd.inc(1)\n  }\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;my-doc-id&quot;,\n  &quot;name&quot;: &quot;Hello&quot;,\n  &quot;count&quot;: {\n    &quot;fav&quot;: 0,\n    &quot;follow&quot;: 0\n  }\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;my-doc-id&quot;,\n  &quot;name&quot;: &quot;Hello&quot;,\n  &quot;count&quot;: {\n    &quot;fav&quot;: 1,\n    &quot;follow&quot;: 0\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>mul</strong></p><p>更新指令。用于指示字段自乘某个值。</p><p>以下示例将count内的fav字段乘10</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;user&#39;).where({\n  _id: &#39;my-doc-id&#39;\n}).update({\n  count: {\n    fav: dbCmd.mul(10)\n  }\n})\n更新前：fav:2 \n更新后：fav:20 \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>remove</strong></p><p>更新指令。用于表示删除某个字段。</p><p>如某人删除了自己一条商品评价中的评分：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;comments&#39;).doc(&#39;comment-id&#39;).update({\n  rating: dbCmd.remove()\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;rating&quot;: 5,\n  &quot;comment&quot;: &quot;xxx&quot;\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;comment&quot;: &quot;xxx&quot;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>push</strong></p><p>向数组尾部追加元素，支持传入单个元素或数组</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;comments&#39;).doc(&#39;comment-id&#39;).update({\n  // users: dbCmd.push(&#39;aaa&#39;)\n  users: dbCmd.push([&#39;c&#39;, &#39;d&#39;])\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;,&quot;b&quot;]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>pop</strong></p><p>删除数组尾部元素</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;comments&#39;).doc(&#39;comment-id&#39;).update({\n  users: dbCmd.pop()\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;,&quot;b&quot;]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>unshift</strong></p><p>向数组头部添加元素，支持传入单个元素或数组。使用同push</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;comments&#39;).doc(&#39;comment-id&#39;).update({\n  // users: dbCmd.push(&#39;aaa&#39;)\n  users: dbCmd.unshift([&#39;c&#39;, &#39;d&#39;])\n})\n\n// 更新前\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;,&quot;b&quot;]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;c&quot;,&quot;d&quot;,&quot;a&quot;,&quot;b&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>shift</strong></p><p>删除数组头部元素。使用同pop</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;comments&#39;).doc(&#39;comment-id&#39;).update({\n  users: dbCmd.shift()\n})\n// 更新前\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;a&quot;,&quot;b&quot;]\n}\n\n// 更新后\n{\n  &quot;_id&quot;: &quot;comment-id&quot;,\n  &quot;users&quot;: [&quot;b&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="查询文档" tabindex="-1"><a class="header-anchor" href="#查询文档"><span>查询文档</span></a></h2><p>支持 <code>where()</code>、<code>limit()</code>、<code>skip()</code>、<code>orderBy()</code>、<code>get()</code>、<code>field()</code>、<code>count()</code> 等操作。</p><p>只有当调用<code>get()</code>时才会真正发送查询请求。</p><p>注：默认取前100条数据，最大取前100条数据。</p><p><strong>get响应参数</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>Array</td><td>查询结果数组</td></tr></tbody></table><h3 id="一、添加查询条件" tabindex="-1"><a class="header-anchor" href="#一、添加查询条件"><span>一、添加查询条件</span></a></h3><p>collection.where()</p><p><strong>在聚合操作中请使用match</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>筛选出所有内存大于 8g 的计算机商品：\nconst dbCmd = db.command // 取指令\ndb.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    memory: dbCmd.gt(8), // 表示大于 8\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>查询所有 name 字段以 ABC 开头的用户\ndb.collection(&#39;user&#39;).where({\n  name: new RegExp(&#39;^ABC&#39;)\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、获取查询数量" tabindex="-1"><a class="header-anchor" href="#二、获取查询数量"><span>二、获取查询数量</span></a></h3><p>collection.count()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;\n}).count()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应参数</p><table><thead><tr><th>字段</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>total</td><td>Number</td><td>否</td><td>计数结果</td></tr></tbody></table><h3 id="三、设置记录数量" tabindex="-1"><a class="header-anchor" href="#三、设置记录数量"><span>三、设置记录数量</span></a></h3><p>collection.limit()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await collection.limit(1).get() // 只返回第一条记录\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="四、设置起始位置" tabindex="-1"><a class="header-anchor" href="#四、设置起始位置"><span>四、设置起始位置</span></a></h3><p>collection.skip(value)</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await collection.skip(4).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="五、对结果排序" tabindex="-1"><a class="header-anchor" href="#五、对结果排序"><span>五、对结果排序</span></a></h3><p>collection.orderBy(field, orderType)</p><p>参数说明</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>field</td><td>string</td><td>是</td><td>排序的字段</td></tr><tr><td>orderType</td><td>string</td><td>是</td><td>排序的顺序，升序(asc) 或 降序(desc)</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await collection.orderBy(&quot;name&quot;, &quot;asc&quot;).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="六、指定返回字段" tabindex="-1"><a class="header-anchor" href="#六、指定返回字段"><span>六、指定返回字段</span></a></h3><p>collection.field()</p><p>从查询结果中，过滤掉不需要的字段，或者指定要返回的字段。</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>-</td><td>object</td><td>是</td><td>过滤字段对象，包含字段名和策略，不返回传false，返回传true</td></tr></tbody></table><p>备注：只能指定要返回的字段或者不要返回的字段。即{&#39;a&#39;: true, &#39;b&#39;: false}是一种错误的参数格式</p><h3 id="七、查询指令" tabindex="-1"><a class="header-anchor" href="#七、查询指令"><span>七、查询指令</span></a></h3><p>查询指令以dbCmd.开头，包括等于、不等于、大于、大于等于、小于、小于等于、in、nin、and、or。</p><ul><li><p>eq 等于</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>写法1：使用:来比较\nlet res = await db.collection(&#39;articles&#39;).where({\n  quarter: &#39;2020 Q2&#39;\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>写法2：使用指令dbcmd.eq()\nlet res = await db.collection(&#39;articles&#39;).where({\n  quarter: dbCmd.eq(&#39;2020 Q2&#39;)\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>eq 特殊用法</strong></p><p>用于表示字段等于某个对象的情况</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 这种写法表示 stat 对象等于 { brand: &#39;S&#39;, name: &#39;S-01&#39; }\n// 对象中还有其他字段时无法匹配，例如：{ brand: &#39;S&#39;, name: &#39;S-01&#39;, author: &#39;S-01-A&#39; }\n// 对象中字段顺序不一致也不能匹配，例如：{ name: &#39;S-01&#39;, brand: &#39;S&#39; }\nconst dbCmd = db.command\nlet res = await db.collection(&#39;articles&#39;).where({\n  stat: dbCmd.eq({\n    brand: &#39;S&#39;,\n    name: &#39;S-01&#39;\n  })\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>neq 不等于</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;goods&#39;).where({\n  category: dbCmd.neq(&#39;computer&#39;)\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>gt 大于</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let res = await db.collection(&#39;goods&#39;).where({\n  price: dbCmd.gt(3000)\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>gte 大于等于</p></li><li><p>lt 小于</p></li><li><p>lte 小于等于</p></li><li><p>in 在数组中</p><p>字段值在给定的数组中。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>筛选出内存为 8g 或 16g 的计算机商品：\nlet res = await db.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    memory: dbCmd.in([8, 16])\n  }\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>nin 不在数组中</p><p>字段值不在给定的数组中。</p></li><li><p>and 且</p><p>表示需同时满足指定的两个或以上的条件。</p><p><strong>流式写法：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>如筛选出内存大于 4g 小于 32g 的计算机商品：\ndb.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    memory: dbCmd.gt(4).and(dbCmd.lt(32))\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>前置写法：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>db.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    memory: dbCmd.and(dbCmd.gt(4), dbCmd.lt(32))\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>or 或</p><p><strong>表示需满足所有指定条件中的至少一个</strong></p><p><strong>流式写法：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>筛选出价格小于 4000 或在 6000-8000 之间的计算机：\ndb.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    price:dbCmd.lt(4000).or(dbCmd.gt(6000).and(dbCmd.lt(8000)))\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>前置写法：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>db.collection(&#39;goods&#39;).where({\n  category: &#39;computer&#39;,\n  type: {\n    price: dbCmd.or(dbCmd.lt(4000), dbCmd.and(dbCmd.gt(6000), dbCmd.lt(8000)))\n  }\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>跨字段 “或” 操作</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>如筛选出内存 8g 或 cpu 3.2 ghz 的计算机\ndb.collection(&#39;goods&#39;).where(dbCmd.or(\n  {\n    type: {\n      memory: dbCmd.gt(8)\n    }\n  },\n  {\n    type: {\n      cpu: 3.2\n    }\n  }\n))\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="八、正则表达式查询" tabindex="-1"><a class="header-anchor" href="#八、正则表达式查询"><span>八、正则表达式查询</span></a></h3><p>db.RegExp</p><p>根据正则表达式进行筛选</p><p>筛选出 version 字段开头是 &quot;数字+s&quot; 的记录，并且忽略大小写</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 可以直接使用正则表达式\ndb.collection(&#39;articles&#39;).where({\n  version: /^\\ds/i\n})\n\n// 也可以使用new RegExp\ndb.collection(&#39;user&#39;).where({\n  name: new RegExp(&#39;^\\\\ds&#39;, &#39;i&#39;)\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据库操作符" tabindex="-1"><a class="header-anchor" href="#数据库操作符"><span>数据库操作符</span></a></h2><h3 id="一、查询·逻辑操作符" tabindex="-1"><a class="header-anchor" href="#一、查询·逻辑操作符"><span>一、查询·逻辑操作符</span></a></h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>and</td><td>查询操作符，用于表示逻辑 &quot;与&quot; 的关系，表示需同时满足多个查询筛选条件</td></tr><tr><td>or</td><td>查询操作符，用于表示逻辑 &quot;或&quot; 的关系，表示需同时满足多个查询筛选条件。或指令有两种用法，一是可以进行字段值的 “或” 操作，二是也可以进行跨字段的 “或” 操作。</td></tr><tr><td>not</td><td>查询操作符，用于表示逻辑 &quot;非&quot; 的关系，表示需不满足指定的条件。</td></tr><tr><td>nor</td><td>查询操作符，用于表示逻辑 &quot;都不&quot; 的关系，表示需不满足指定的所有条件。如果记录中没有对应的字段，则默认满足条件。</td></tr></tbody></table><h4 id="_1-and" tabindex="-1"><a class="header-anchor" href="#_1-and"><span>1.and</span></a></h4><p>查询操作符，用于表示逻辑 &quot;与&quot; 的关系，表示需同时满足多个查询筛选条件</p><p>使用说明 <code>and</code> 有两种使用情况：</p><ul><li><ol><li>用在根查询条件</li></ol><p>此时需传入多个查询条件，表示需同时满足提供的多个完整查询条件</p></li></ul><details><summary style="font-weight:bold;">示例 1</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where(dbCmd.and([\n\t  {\n\t    progress: dbCmd.gt(50)\n\t  },\n\t  {\n\t    tags: &#39;cloud&#39;\n\t  }\n\t])).get()\n\t但以上用 and 组成的查询条件是不必要的，因为传入的对象的各字段隐式组成了 “与” 的关系，上述条件等价于下方更简洁的写法：\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.gt(50),\n\t  tags: &#39;cloud&#39;\n\t}).get()\n\t通常需要显示使用 `and` 是用在有跨字段或操作的时候\n\t</code>\n\t</pre></details><ul><li><ol start="2"><li>用在字段查询条件</li></ol><p>需传入多个查询操作符或常量，表示字段需满足或匹配给定的条件。</p></li></ul><details><summary style="font-weight:bold;">示例 2</summary><pre>\t<code>\n\t//如以下用前置写法的方式表示 &quot;progress 字段值大于 50 且小于 100&quot;\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.and(dbCmd.gt(50), dbCmd.lt(100))\n\t}).get()\n\t//还可以用后置写法的方式表示同样的条件：\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.gt(50).and(dbCmd.lt(100))\n\t}).get()\n\t注意 Command 默认也可以直接链式调用其他 Command，默认表示多个 Command 的与操作，因此上述代码还可以精简为：\n\t//\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.gt(50).lt(100)\n\t}).get()\n\t</code>\n\t</pre></details><p>调用风格 方法接收两种传参方式，一是传入一个数组参数，二是传入多个参数，效果一样。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 传入数组\nfunction and(expressions: Expression[]): Command\n// 传入多参数\nfunction and(...expressions: Expression[]): Command\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-or" tabindex="-1"><a class="header-anchor" href="#_2-or"><span>2.or</span></a></h4><p>查询操作符，用于表示逻辑 &quot;或&quot; 的关系，表示需同时满足多个查询筛选条件。或指令有两种用法，一是可以进行字段值的 “或” 操作，二是也可以进行跨字段的 “或” 操作。</p><ul><li><p>字段值的或操作</p><p>字段值的 “或” 操作指的是指定一个字段值为多个值之一即可。</p></li></ul><details><summary style="font-weight:bold;">示例 1:如筛选出进度大于 80 或小于 20 的 todo</summary><pre>\t<code>\n\t流式写法：\n\tlet res = await const dbCmd = db.command\n\tdb.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.gt(80).or(dbCmd.lt(20))\n\t}).get()\n\t前置写法：\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.or(dbCmd.gt(80), dbCmd.lt(20))\n\t}).get()\n\t前置写法也可接收一个数组：\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.or([dbCmd.gt(80), dbCmd.lt(20)])\n\t}).get()\n\t</code>\n\t</pre></details><ul><li><p>跨字段的或操作</p><p>跨字段的 “或” 操作指条件 “或”，相当于可以传入多个 where 语句，满足其中一个即可。</p></li></ul><details><summary style="font-weight:bold;">示例 1:如筛选出进度大于 80 或已标为已完成的 todo：</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where(dbCmd.or([\n\t  {\n\t    progress: dbCmd.gt(80)\n\t  },\n\t  {\n\t    done: true\n\t  }\n\t])).get()\n\t</code>\n\t</pre></details><p>调用风格 方法接收两种传参方式，一是传入一个数组参数，二是传入多个参数，效果一样。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 传入数组\nfunction or(expressions: Expression[]): Command\n// 传入多参数\nfunction or(...expressions: Expression[]): Command\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-not" tabindex="-1"><a class="header-anchor" href="#_3-not"><span>3.not</span></a></h4><p>查询操作符，用于表示逻辑 &quot;非&quot; 的关系，表示需不满足指定的条件。</p><blockquote><p>示例</p></blockquote><details><summary style="font-weight:bold;">示例 1:如筛选出进度不等于100的 todo：</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.not(dbCmd.eq(100))\n\t}).get()\n\t//not 也可搭配其他逻辑指令使用，包括 and, or, nor, not，如 or：\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.not(dbCmd.or([dbCmd.lt(50), dbCmd.eq(100)]))\n\t}).get()\n\t</code>\n\t</pre></details><h4 id="_4-nor" tabindex="-1"><a class="header-anchor" href="#_4-nor"><span>4.nor</span></a></h4><p>查询操作符，用于表示逻辑 &quot;都不&quot; 的关系，表示需不满足指定的所有条件。如果记录中没有对应的字段，则默认满足条件。</p><blockquote><p>示例</p></blockquote><details><summary style="font-weight:bold;">示例 1:筛选出进度既不小于20又不大于80的 todo ：</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.nor([dbCmd.lt(20), dbCmd.gt(80)])\n\t}).get()\n\t//以上同时会筛选出不存在 progress 字段的记录，如果要要求 progress 字段存在，可以用 exists 指令：\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where({\n\t  progress: dbCmd.exists().nor([dbCmd.lt(20), dbCmd.gt(80)])\n\t  // 等价于以下非链式调用的写法：\n\t  // progress: dbCmd.exists().and(dbCmd.nor([dbCmd.lt(20), dbCmd.gt(80)]))\n\t}).get()\n\t</code>\n\t</pre></details><details><summary style="font-weight:bold;">示例 2:筛选出 progress 不小于 20 且 tags 数组不包含 miniprogram 字符串的记录：</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tdb.collection(&#39;todo&#39;).where(dbCmd.nor([{\n\t  progress: dbCmd.lt(20),\n\t}, {\n\t  tags: &#39;miniprogram&#39;,\n\t}])).get()\n\t//以上会筛选出满足以下条件之一的记录：\n\tprogress 不小于 20 且 tags 数组不包含 miniprogram 字符串 3. progress 不小于 20 且 tags 字段不存在 5. progress 字段不存在 且 tags 数组不包含 miniprogram 字符串 7. progress 不小于 20 且 tags 字段不存在 如果要求 progress 和 tags 字段存在，可以用 exists 指令：\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todo&#39;).where(\n\t  dbCmd.nor([{\n\t    progress: dbCmd.lt(20),\n\t  }, {\n\t    tags: &#39;miniprogram&#39;,\n\t  }])\n\t  .and({\n\t    progress: dbCmd.exists(true),\n\t    tags: dbCmd.exists(true),\n\t  })\n\t).get()\n\t</code>\n\t</pre></details><p>调用风格...</p><h3 id="二、查询·比较操作符" tabindex="-1"><a class="header-anchor" href="#二、查询·比较操作符"><span>二、查询·比较操作符</span></a></h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>eq</td><td>查询筛选条件，表示字段等于某个值。<code>eq</code> 指令接受一个字面量 (literal)，可以是 <code>number</code>, <code>boolean</code>,<code> string,</code> <code>object</code>, <code>array</code>, <code>Date</code>。</td></tr><tr><td>neq</td><td>查询筛选条件，表示字段不等于某个值。eq 指令接受一个字面量 (literal)，可以是 number, boolean, string, object, array, Date。</td></tr><tr><td>lt</td><td>查询筛选操作符，表示需小于指定值。可以传入 Date 对象用于进行日期比较</td></tr><tr><td>lte</td><td>查询筛选操作符，表示需小于或等于指定值。可以传入 Date 对象用于进行日期比较。</td></tr><tr><td>gt</td><td>查询筛选操作符，表示需大于指定值。可以传入 Date 对象用于进行日期比较。</td></tr><tr><td>gte</td><td>查询筛选操作符，表示需大于或等于指定值。可以传入 Date 对象用于进行日期比较。</td></tr><tr><td>in</td><td>查询筛选操作符，表示要求值在给定的数组内。</td></tr><tr><td>nin</td><td>查询筛选操作符，表示要求值不在给定的数组内。</td></tr></tbody></table><h4 id="_1-eq" tabindex="-1"><a class="header-anchor" href="#_1-eq"><span>1.eq</span></a></h4><p>查询筛选条件，表示字段等于某个值。<code>eq</code> 指令接受一个字面量 (literal)，可以是 <code>number</code>, <code>boolean</code>,<code> string,</code> <code>object</code>, <code>array</code>, <code>Date</code>。</p><p>比如筛选出所有自己发表的文章，除了用传对象的方式：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const openID = &#39;xxx&#39;\nlet res = await db.collection(&#39;articles&#39;).where({\n  _openid: openID\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以用指令：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nconst openID = &#39;xxx&#39;\nlet res = await db.collection(&#39;articles&#39;).where({\n  _openid: dbCmd.eq(openid)\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>eq</code> 指令比对象的方式有更大的灵活性，可以用于表示字段等于某个对象的情况，比如：</p><details><summary style="font-weight:bold;">示例 1:</summary><pre>\t<code>\n\t// 这种写法表示匹配 stat.publishYear == 2018 且 stat.language == &#39;zh-CN&#39;\n\tlet res = await db.collection(&#39;articles&#39;).where({\n\t  stat: {\n\t    publishYear: 2018,\n\t    language: &#39;zh-CN&#39;\n\t  }\n\t}).get()\n\t// 这种写法表示 stat 对象等于 { publishYear: 2018, language: &#39;zh-CN&#39; }\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;articles&#39;).where({\n\t  stat: dbCmd.eq({\n\t    publishYear: 2018,\n\t    language: &#39;zh-CN&#39;\n\t  })\n\t}).get()\n\t</code>\n\t</pre></details><h4 id="_2-neq" tabindex="-1"><a class="header-anchor" href="#_2-neq"><span>2.neq</span></a></h4><p>查询筛选条件，表示字段不等于某个值。<code>eq</code> 指令接受一个字面量 (literal)，可以是 <code>number</code>, <code>boolean</code>, <code>string</code>, <code>object</code>, <code>array</code>, <code>Date</code>。</p><p>表示字段不等于某个值，和 eq 相反</p><h4 id="_3-lt" tabindex="-1"><a class="header-anchor" href="#_3-lt"><span>3.lt</span></a></h4><p>查询筛选操作符，表示需小于指定值。可以传入 <code>Date</code> 对象用于进行日期比较。</p><p>找出进度小于 50 的 todo:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).where({\n  progress: dbCmd.lt(50)\n})\n.get({\n  success: console.log,\n  fail: console.error\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-lte" tabindex="-1"><a class="header-anchor" href="#_4-lte"><span>4.lte</span></a></h4><p>查询筛选操作符，表示需小于或等于指定值。可以传入 <code>Date</code> 对象用于进行日期比较。</p><p>找出进度小于或等于 50 的 todo</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).where({\n  progress: dbCmd.lte(50)\n})\n.get({\n  success: console.log,\n  fail: console.error\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-gt" tabindex="-1"><a class="header-anchor" href="#_5-gt"><span>5.gt</span></a></h4><p>查询筛选操作符，表示需大于指定值。可以传入 Date 对象用于进行日期比较。</p><p>找出进度大于 50 的 todo</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).where({\n  progress: dbCmd.gt(50)\n})\n.get({\n  success: console.log,\n  fail: console.error\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-gte" tabindex="-1"><a class="header-anchor" href="#_6-gte"><span>6.gte</span></a></h4><p>查询筛选操作符，表示需大于或等于指定值。可以传入 Date 对象用于进行日期比较。</p><p>找出进度大于或等于 50 的 todo</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).where({\n  progress: dbCmd.gte(50)\n})\n.get({\n  success: console.log,\n  fail: console.error\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-in" tabindex="-1"><a class="header-anchor" href="#_7-in"><span>7.in</span></a></h4><p>查询筛选操作符，表示要求值在给定的数组内。</p><p>找出进度为 0 或 100 的 todo</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).where({\n  progress: dbCmd.in([0, 100])\n})\n.get({\n  success: console.log,\n  fail: console.error\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-nin" tabindex="-1"><a class="header-anchor" href="#_8-nin"><span>8.nin</span></a></h4><p>查询筛选操作符，表示要求值不在给定的数组内。</p><p>找出进度不是 0 或 100 的 todo</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).where({\n  progress: dbCmd.nin([0, 100])\n})\n.get({\n  success: console.log,\n  fail: console.error\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、查询·字段操作符" tabindex="-1"><a class="header-anchor" href="#三、查询·字段操作符"><span>三、查询·字段操作符</span></a></h3><h4 id="_1-exists" tabindex="-1"><a class="header-anchor" href="#_1-exists"><span>1.exists</span></a></h4><p>判断字段是否存在</p><p>找出存在 tags 字段的记录</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).where({\n  tags: dbCmd.exists(true)\n})\n.get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-mod" tabindex="-1"><a class="header-anchor" href="#_2-mod"><span>2.mod</span></a></h4><p>查询筛选操作符，给定除数 divisor 和余数 remainder，要求字段作为被除数时 value % divisor = remainder。</p><p>找出进度为 10 的倍数的字段的记录</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).where({\n  progress: dbCmd.mod(10, 0)\n})\n.get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、查询·数组操作符" tabindex="-1"><a class="header-anchor" href="#四、查询·数组操作符"><span>四、查询·数组操作符</span></a></h3><h4 id="_1-all" tabindex="-1"><a class="header-anchor" href="#_1-all"><span>1.all</span></a></h4><p>数组查询操作符。用于数组字段的查询筛选条件，要求数组字段中包含给定数组的所有元素。</p><ul><li>示例代码 1：普通数组</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>找出 tags 数组字段同时包含 cloud 和 database 的记录\nconst dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).where({\n  tags: dbCmd.all([&#39;cloud&#39;, &#39;database&#39;])\n})\n.get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例代码 2：对象数组 //如果数组元素是对象，则可以用 dbCmd.elemMatch 匹配对象的部分字段</li></ul><details><summary style="font-weight:bold;">示例 1:</summary><pre>\t<code>\n\t//假设有字段 places 定义如下：\n\t{\n\t  &quot;type&quot;: string\n\t  &quot;area&quot;: number\n\t  &quot;age&quot;: number\n\t}\n\t//找出数组字段中至少同时包含一个满足 “area 大于 100 且 age 小于 2” 的元素和一个满足 “type 为 mall 且 age 大于 5” 的元素\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).where({\n\t  places: dbCmd.all([\n\t    dbCmd.elemMatch({\n\t      area: dbCmd.gt(100),\n\t      age: dbCmd.lt(2),\n\t    }),\n\t    dbCmd.elemMatch({\n\t      type: &#39;mall&#39;,\n\t      age: dbCmd.gt(5),\n\t    }),\n\t  ]),\n\t})\n\t.get()\n\t</code>\n</pre></details><h4 id="_2-elemmatch" tabindex="-1"><a class="header-anchor" href="#_2-elemmatch"><span>2.elemMatch</span></a></h4><p>用于数组字段的查询筛选条件，要求数组中包含至少一个满足 <code>elemMatch</code> 给定的所有条件的元素</p><details><summary style="font-weight:bold;">示例 1:数组是对象数组的情况</summary><pre>\t<code>\n\t//假设集合示例数据如下：\n\t{\n\t  &quot;_id&quot;: &quot;a0&quot;,\n\t  &quot;city&quot;: &quot;x0&quot;,\n\t  &quot;places&quot;: [{\n\t    &quot;type&quot;: &quot;garden&quot;,\n\t    &quot;area&quot;: 300,\n\t    &quot;age&quot;: 1\n\t  }, {\n\t    &quot;type&quot;: &quot;theatre&quot;,\n\t    &quot;area&quot;: 50,\n\t    &quot;age&quot;: 15\n\t  }]\n\t}\n\t//找出 places 数组字段中至少同时包含一个满足 “area 大于 100 且 age 小于 2” 的元素\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).where({\n\t  places: dbCmd.elemMatch({\n\t    area: dbCmd.gt(100),\n\t    age: dbCmd.lt(2),\n\t  })\n\t})\n\t.get()\n\t注意*：如果不使用 elemMatch 而直接如下指定条件，则表示的是 places 数组字段中至少有一个元素的 area 字段大于 100 且 places 数组字段中至少有一个元素的 age 字段小于 2：\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).where({\n\t  places: {\n\t    area: dbCmd.gt(100),\n\t    age: dbCmd.lt(2),\n\t  }\n\t})\n\t.get()\n\t</code>\n</pre></details><details><summary style="font-weight:bold;">示例 2:数组元素都是普通数据类型的情况</summary><pre>\t<code>\n\t//假设集合示例数据如下：\n\t{\n\t  &quot;_id&quot;: &quot;a0&quot;,\n\t  &quot;scores&quot;: [60, 80, 90]\n\t}\n\t//找出 scores 数组字段中至少同时包含一个满足 “大于 80 且小于 100” 的元素\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).where({\n\t  scores: dbCmd.elemMatch(dbCmd.gt(80).lt(100))\n\t})\n\t.get()\n\t</code>\n</pre></details><h4 id="_3-size" tabindex="-1"><a class="header-anchor" href="#_3-size"><span>3.size</span></a></h4><p>更新操作符，用于数组字段的查询筛选条件，要求数组长度为给定值</p><p>找出 tags 数组字段长度为 2 的所有记录</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).where({\n  places: dbCmd.size(2)\n})\n.get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、查询·地理位置操作符" tabindex="-1"><a class="header-anchor" href="#五、查询·地理位置操作符"><span>五、查询·地理位置操作符</span></a></h3><h4 id="_1-geonear" tabindex="-1"><a class="header-anchor" href="#_1-geonear"><span>1.geoNear</span></a></h4><p>按从近到远的顺序，找出字段值在给定点的附近的记录。</p><p>索引要求 需对查询字段建立地理位置索引</p><p>找出离给定位置 1 公里到 5 公里范围内的记录</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;restaurants&#39;).where({\n  location: dbCmd.geoNear({\n    geometry: new db.Geo.Point(113.323809, 23.097732),\n    minDistance: 1000,\n    maxDistance: 5000,\n  })\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-geowithin" tabindex="-1"><a class="header-anchor" href="#_2-geowithin"><span>2.geoWithin</span></a></h4><p>找出字段值在指定区域内的记录，无排序。指定的区域必须是多边形（Polygon）或多边形集合（MultiPolygon）。</p><p>索引要求 需对查询字段建立地理位置索引</p><details><summary style="font-weight:bold;">示例 1:给定多边形</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tconst { Point, LineString, Polygon } = db.Geo\n\tlet res = await .collection(&#39;restaurants&#39;).where({\n\t  location: dbCmd.geoWithin({\n\t    geometry: new Polygon([\n\t      new LineString([\n\t        new Point(0, 0),\n\t        new Point(3, 2),\n\t        new Point(2, 3),\n\t        new Point(0, 0)\n\t      ])\n\t    ]),\n\t  })\n\t}).get()\n\t</code>\n</pre></details><blockquote><p>给定圆形</p></blockquote><p>可以不用 <code>geometry</code> 而用 <code>centerSphere</code> 构建一个圆形。</p><p><code>centerSphere</code> 对应的值的定义是：<code>[ [经度, 纬度], 半径 ]</code></p><p>半径需以弧度计，比如需要 10km 的半径，则用距离除以地球半径 6378.1km 得出的数字。</p><details><summary style="font-weight:bold;">示例 2:给定圆形</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tconst { Point, LineString, Polygon } = db.Geo\n\tlet res = await .collection(&#39;restaurants&#39;).where({\n\t  location: dbCmd.geoWithin({\n\t    geometry: new Polygon([\n\t      new LineString([\n\t        new Point(0, 0),\n\t        new Point(3, 2),\n\t        new Point(2, 3),\n\t        new Point(0, 0)\n\t      ])\n\t    ]),\n\t  })\n\t}).get()\n\t</code>\n</pre></details><h4 id="_3-geointersects" tabindex="-1"><a class="header-anchor" href="#_3-geointersects"><span>3.geoIntersects</span></a></h4><p>找出给定的地理位置图形相交的记录</p><p>索引要求 需对查询字段建立地理位置索引</p><p>找出和一个多边形相交的记录:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nconst { Point, LineString, Polygon } = db.Geo\nlet res = await db.collection(&#39;restaurants&#39;).where({\n  location: dbCmd.geoIntersects({\n    geometry: new Polygon([\n      new LineString([\n        new Point(0, 0),\n        new Point(3, 2),\n        new Point(2, 3),\n        new Point(0, 0)\n      ])\n    ]),\n  })\n}).get()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六、查询·表达式操作符" tabindex="-1"><a class="header-anchor" href="#六、查询·表达式操作符"><span>六、查询·表达式操作符</span></a></h3><h4 id="_1-expr" tabindex="-1"><a class="header-anchor" href="#_1-expr"><span>1.expr</span></a></h4><p>查询操作符，用于在查询语句中使用聚合表达式，方法接收一个参数，该参数必须为聚合表达式</p><p>使用说明</p><ul><li>expr 可用于在聚合 match 流水线阶段中引入聚合表达式 3. 如果聚合 match 阶段是在 lookup 阶段内，此时的 expr 表达式内可使用 lookup 中使用 let 参数定义的变量，具体示例可见 lookup 的 指定多个连接条件 例子 5. expr 可用在普通查询语句（where）中引入聚合表达式</li></ul><details><summary style="font-weight:bold;">示例代码 1：比较同一个记录中的两个字段</summary><pre>\t<code>\n\t//假设 items 集合的数据结构如下：\n\t{\n\t  &quot;_id&quot;: string,\n\t  &quot;inStock&quot;: number, // 库存量\n\t  &quot;ordered&quot;: number  // 被订量\n\t}\n\t//找出被订量大于库存量的记录：\n\tconst dbCmd = db.command\n\tconst $ = dbCmd.aggregate\n\tlet res = await db.collection(&#39;items&#39;).where(dbCmd.expr($.gt(&#39;$ordered&#39;, &#39;$inStock&#39;))).get()\n\t</code>\n</pre></details><details><summary style="font-weight:bold;">示例代码 2：与条件语句组合使用</summary><pre>\t<code>\n\t假设 items 集合的数据结构如下：\n\t{\n\t  &quot;_id&quot;: string,\n\t  &quot;price&quot;: number\n\t}\n\t假设加个小于等于 10 的打 8 折，大于 10 的打 5 折，让数据库查询返回打折后价格小于等于 8 的记录：\n\tconst dbCmd = db.command\n\tconst $ = dbCmd.aggregate\n\tlet res = await db.collection(&#39;items&#39;).where(dbCmd.expr(\n\t  $.lt(\n\t    $.cond({\n\t      if: $.gte(&#39;$price&#39;, 10),\n\t      then: $.multiply([&#39;$price&#39;, &#39;0.5&#39;]),\n\t      else: $.multiply([&#39;$price&#39;, &#39;0.8&#39;]),\n\t    })\n\t    ,\n\t    8\n\t  )\n\t).get()\n\t</code>\n</pre></details><h3 id="七、更新·字段操作符" tabindex="-1"><a class="header-anchor" href="#七、更新·字段操作符"><span>七、更新·字段操作符</span></a></h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>set</td><td>更新操作符，用于设定字段等于指定值。</td></tr><tr><td>remove</td><td>更新操作符，用于表示删除某个字段。</td></tr><tr><td>inc</td><td>更新操作符，原子操作，用于指示字段自增</td></tr><tr><td>mul</td><td>更新操作符，原子操作，用于指示字段自乘某个值</td></tr><tr><td>min</td><td>更新操作符，给定一个值，只有该值小于字段当前值才进行更新。</td></tr><tr><td>max</td><td>更新操作符，给定一个值，只有该值大于字段当前值才进行更新。</td></tr><tr><td>rename</td><td>更新操作符，字段重命名。如果需要对嵌套深层的字段做重命名，需要用点路径表示法。不能对嵌套在数组里的对象的字段进行重命名。</td></tr></tbody></table><h4 id="_1-set" tabindex="-1"><a class="header-anchor" href="#_1-set"><span>1.set</span></a></h4><p>更新操作符，用于设定字段等于指定值。</p><p>使用说明 这种方法相比传入纯 JS 对象的好处是能够指定字段等于一个对象</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 以下方法只会更新 style.color 为 red，而不是将 style 更新为 { color: &#39;red&#39; }，即不影响 style 中的其他字段\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  style: {\n    color: &#39;red&#39;\n  }\n})\n\n// 以下方法更新 style 为 { color: &#39;red&#39;, size: &#39;large&#39; }\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  style: dbCmd.set({\n    color: &#39;red&#39;,\n    size: &#39;large&#39;\n  })\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-remove" tabindex="-1"><a class="header-anchor" href="#_2-remove"><span>2.remove</span></a></h4><p>更新操作符，用于表示删除某个字段。</p><p>删除 style 字段：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;todo-id&#39;).update({\n  style: dbCmd.remove()\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-inc" tabindex="-1"><a class="header-anchor" href="#_3-inc"><span>3.inc</span></a></h4><p>更新操作符，原子操作，用于指示字段自增</p><p>原子自增 多个用户同时写，对数据库来说都是将字段自增，不会有后来者覆写前者的情况</p><p>将一个 todo 的进度自增 10：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;todo-id&#39;).update({\n  progress: dbCmd.inc(10)\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-mul" tabindex="-1"><a class="header-anchor" href="#_4-mul"><span>4.mul</span></a></h4><p>更新操作符，原子操作，用于指示字段自乘某个值</p><p>原子自乘 多个用户同时写，对数据库来说都是将字段自乘，不会有后来者覆写前者的情况</p><p>将一个 todo 的进度自乘 10：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;todo-id&#39;).update({\n  progress: dbCmd.mul(10)\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-min" tabindex="-1"><a class="header-anchor" href="#_5-min"><span>5.min</span></a></h4><p>更新操作符，给定一个值，只有该值小于字段当前值才进行更新。</p><p>如果字段 progress &gt; 50，则更新到 50</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  progress: dbCmd.min(50)\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-max" tabindex="-1"><a class="header-anchor" href="#_6-max"><span>6.max</span></a></h4><p>更新操作符，给定一个值，只有该值大于字段当前值才进行更新。</p><p>如果字段 progress &lt; 50，则更新到 50</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  progress: dbCmd.max(50)\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-rename" tabindex="-1"><a class="header-anchor" href="#_7-rename"><span>7.rename</span></a></h4><p>更新操作符，字段重命名。如果需要对嵌套深层的字段做重命名，需要用点路径表示法。不能对嵌套在数组里的对象的字段进行重命名。</p><p>示例 1：重命名顶层字段</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  progress: dbCmd.rename(&#39;totalProgress&#39;)\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：重命名嵌套字段</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  someObject: {\n    someField: dbCmd.rename(&#39;someObject.renamedField&#39;)\n  }\n})\n或：\nconst dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  &#39;someObject.someField&#39;: dbCmd.rename(&#39;someObject.renamedField&#39;)\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="八、更新·数组操作符" tabindex="-1"><a class="header-anchor" href="#八、更新·数组操作符"><span>八、更新·数组操作符</span></a></h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>push</td><td>数组更新操作符。对一个值为数组的字段，往数组添加一个或多个值。或字段原为空，则创建该字段并设数组为传入值。</td></tr><tr><td>pop</td><td>数组更新操作符，对一个值为数组的字段，将数组尾部元素删除，仅可以删除末尾一个</td></tr><tr><td>unshift</td><td>数组更新操作符，对一个值为数组的字段，往数组头部添加一个或多个值。或字段原为空，则创建该字段并设数组为传入值。</td></tr><tr><td>shift</td><td>数组更新操作符，对一个值为数组的字段，将数组头部元素删除。</td></tr><tr><td>pull</td><td>数组更新操作符。给定一个值或一个查询条件，将数组中所有匹配给定值或查询条件的元素都移除掉。</td></tr><tr><td>pullAll</td><td>数组更新操作符。给定一个值或一个查询条件，将数组中所有匹配给定值的元素都移除掉。跟 pull 的差别在于只能指定常量值、传入的是数组。</td></tr><tr><td>addToSet</td><td>数组更新操作符。原子操作。给定一个或多个元素，除非数组中已存在该元素，否则添加进数组。</td></tr></tbody></table><h4 id="_1-push" tabindex="-1"><a class="header-anchor" href="#_1-push"><span>1.push</span></a></h4><p>数组更新操作符。对一个值为数组的字段，往数组添加一个或多个值。或字段原为空，则创建该字段并设数组为传入值。</p><p>参数说明</p><ul><li><p>position 说明</p><p>要求必须同时有 each 参数存在。</p><p>非负数代表从数组开始位置数的位置，从 0 开始计。如果数值大于等于数组长度，则视为在尾部添加。负数代表从数组尾部倒数的位置，比如 -1 就代表倒数第二个元素的位置。如果负数数值的绝对值大于等于数组长度，则视为从数组头部添加。</p></li><li><p>sort 说明</p><p>要求必须同时有 each 参数存在。给定 1 代表升序，-1 代表降序。</p><p>如果数组元素是记录，则用 { &lt;字段&gt;: 1 | -1 } 的格式表示根据记录中的什么字段做升降序排序。</p></li><li><p>slice 说明**</p><p>要求必须同时有 each 参数存在 |值 |说明 | |------|------| |0 |将字段更新为空数组 | |正数 |数组只保留前 n 个元素 | |负数 |数组只保留后 n 个元素 |</p></li></ul><details><summary style="font-weight:bold;">示例代码 1：尾部添加元素</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.push([&#39;mini-program&#39;, &#39;cloud&#39;])\n\t})\n\t</code>\n</pre></details><details><summary style="font-weight:bold;">示例代码 2：从第二个位置开始插入</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.push({\n\t    each: [&#39;mini-program&#39;, &#39;cloud&#39;],\n\t    position: 1,\n\t  })\n\t})\n\t</code>\n</pre></details><details><summary style="font-weight:bold;">示例代码 3：排序</summary><pre>\t<code>\n\t//插入后对整个数组做排序\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.push({\n\t    each: [&#39;mini-program&#39;, &#39;cloud&#39;],\n\t    sort: 1,\n\t  })\n\t})\n\t//不插入，只对数组做排序\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.push({\n\t    each: [],\n\t    sort: 1,\n\t  })\n\t})\n\t//如果字段是对象数组，可以如下根据元素对象里的字段进行排序：\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.push({\n\t    each: [\n\t      { name: &#39;miniprogram&#39;, weight: 8 },\n\t      { name: &#39;cloud&#39;, weight: 6 },\n\t    ],\n\t    sort: {\n\t      weight: 1,\n\t    },\n\t  })\n\t})\n\t</code>\n</pre></details><details><summary style="font-weight:bold;">示例代码 4：截断保留</summary><pre>\t<code>\n\t//插入后只保留后 2 个元素\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.push({\n\t    each: [&#39;mini-program&#39;, &#39;cloud&#39;],\n\t    slice: -2,\n\t  })\n\t})\n\t</code>\n</pre></details><details><summary style="font-weight:bold;">示例代码 5：在指定位置插入、然后排序、最后只保留前 2 个元素</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.push({\n\t    each: [&#39;mini-program&#39;, &#39;cloud&#39;],\n\t    position: 1,\n\t    slice: 2,\n\t    sort: 1,\n\t  })\n\t})\n\t</code>\n</pre></details><h4 id="_2-pop" tabindex="-1"><a class="header-anchor" href="#_2-pop"><span>2.pop</span></a></h4><p>数组更新操作符，对一个值为数组的字段，将数组尾部元素删除，仅可以删除末尾一个</p><p>示例代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  tags: dbCmd.pop()\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-unshift" tabindex="-1"><a class="header-anchor" href="#_3-unshift"><span>3.unshift</span></a></h4><p>数组更新操作符，对一个值为数组的字段，往数组头部添加一个或多个值。或字段原为空，则创建该字段并设数组为传入值。</p><p>示例代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  tags: dbCmd.unshift([&#39;mini-program&#39;, &#39;cloud&#39;])\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-shift" tabindex="-1"><a class="header-anchor" href="#_4-shift"><span>4.shift</span></a></h4><p>数组更新操作符，对一个值为数组的字段，将数组头部元素删除。</p><p>示例代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  tags: dbCmd.shift()\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-pull" tabindex="-1"><a class="header-anchor" href="#_5-pull"><span>5.pull</span></a></h4><p>数组更新操作符。给定一个值或一个查询条件，将数组中所有匹配给定值或查询条件的元素都移除掉。</p><details><summary style="font-weight:bold;">示例代码 1：根据常量匹配移除</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.pull(&#39;database&#39;)\n\t})\n\t</code>\n</pre></details><details><summary style="font-weight:bold;">示例代码 2：根据查询条件匹配移除</summary><pre>\t<code>\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.pull(dbCmd.in([&#39;database&#39;, &#39;cloud&#39;]))\n\t})\n\t</code>\n</pre></details><details><summary style="font-weight:bold;">示例代码 3：对象数组时，根据查询条件匹配移除</summary><pre>\t<code>\n\t假设有字段 places 数组中的元素结构如下\n\t{\n\t  &quot;type&quot;: string\n\t  &quot;area&quot;: number\n\t  &quot;age&quot;: number\n\t}\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  places: dbCmd.pull({\n\t    area: dbCmd.gt(100),\n\t    age: dbCmd.lt(2),\n\t  })\n\t})\n\t</code>\n</pre></details><details><summary style="font-weight:bold;">示例代码 4：有嵌套对象的对象数组时，根据查询条件匹配移除</summary><pre>\t<code>\n\t//假设有字段 cities 数组中的元素结构如下\n\t{\n\t  &quot;name&quot;: string\n\t  &quot;places&quot;: Place[]\n\t}\n\t//Place 结构如下：\n\t{\n\t  &quot;type&quot;: string\n\t  &quot;area&quot;: number\n\t  &quot;age&quot;: number\n\t}\n\t//可用 elemMatch 匹配嵌套在对象数组里面的对象数组字段 places\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  cities: dbCmd.pull({\n\t    places: dbCmd.elemMatch({\n\t      area: dbCmd.gt(100),\n\t      age: dbCmd.lt(2),\n\t    })\n\t  })\n\t})\n\t</code>\n</pre></details><h4 id="_6-pullall" tabindex="-1"><a class="header-anchor" href="#_6-pullall"><span>6.pullAll</span></a></h4><p>数组更新操作符。给定一个值或一个查询条件，将数组中所有匹配给定值的元素都移除掉。跟 <code>pull</code> 的差别在于只能指定常量值、传入的是数组。</p><p>根据常量匹配移除</p><p>从 tags 中移除所有 database 和 cloud 字符串</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const dbCmd = db.command\nlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n  tags: dbCmd.pullAll([&#39;database&#39;, &#39;cloud&#39;])\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-addtoset" tabindex="-1"><a class="header-anchor" href="#_7-addtoset"><span>7.addToSet</span></a></h4><p>数组更新操作符。原子操作。给定一个或多个元素，除非数组中已存在该元素，否则添加进数组。</p><details><summary style="font-weight:bold;">示例代码 1：添加一个元素</summary><pre>\t<code>\n\t如果 tags 数组中不包含 database，添加进去\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.addToSet(&#39;database&#39;)\n\t})\n\t</code>\n</pre></details><details><summary style="font-weight:bold;">示例代码 1：添加多个元素</summary><pre>\t<code>\n\t需传入一个对象，其中有一个字段 each，其值为数组，每个元素就是要添加的元素\n\tconst dbCmd = db.command\n\tlet res = await db.collection(&#39;todos&#39;).doc(&#39;doc-id&#39;).update({\n\t  tags: dbCmd.addToSet({\n\t    each: [&#39;database&#39;, &#39;cloud&#39;]\n\t  })\n\t})\n\t</code>\n</pre></details>',279)],a={},l=(0,d(6262).A)(a,[["render",function(e,t){return(0,n.uX)(),(0,n.CE)("div",null,i)}]]),s=JSON.parse('{"path":"/markdown/%E5%89%8D%E7%AB%AF/UniCloud/","title":"UniCloud数据库操作文档","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"新增文档","slug":"新增文档","link":"#新增文档","children":[{"level":3,"title":"方法1： collection.add(data)","slug":"方法1-collection-add-data","link":"#方法1-collection-add-data","children":[]}]},{"level":2,"title":"删除文档","slug":"删除文档","link":"#删除文档","children":[{"level":3,"title":"方式1 通过指定文档ID删除","slug":"方式1-通过指定文档id删除","link":"#方式1-通过指定文档id删除","children":[]},{"level":3,"title":"方式2 条件查找文档然后直接批量删除","slug":"方式2-条件查找文档然后直接批量删除","link":"#方式2-条件查找文档然后直接批量删除","children":[]}]},{"level":2,"title":"更新文档","slug":"更新文档","link":"#更新文档","children":[{"level":3,"title":"一、更新指定文档","slug":"一、更新指定文档","link":"#一、更新指定文档","children":[]},{"level":3,"title":"二、更新文档，如果不存在则创建","slug":"二、更新文档-如果不存在则创建","link":"#二、更新文档-如果不存在则创建","children":[]},{"level":3,"title":"三、批量更新文档","slug":"三、批量更新文档","link":"#三、批量更新文档","children":[]},{"level":3,"title":"四、更新数组对象内指定下标的元素","slug":"四、更新数组对象内指定下标的元素","link":"#四、更新数组对象内指定下标的元素","children":[]},{"level":3,"title":"五、更新数组对象内匹配条件的元素","slug":"五、更新数组对象内匹配条件的元素","link":"#五、更新数组对象内匹配条件的元素","children":[]},{"level":3,"title":"六、更新操作符","slug":"六、更新操作符","link":"#六、更新操作符","children":[]}]},{"level":2,"title":"查询文档","slug":"查询文档","link":"#查询文档","children":[{"level":3,"title":"一、添加查询条件","slug":"一、添加查询条件","link":"#一、添加查询条件","children":[]},{"level":3,"title":"二、获取查询数量","slug":"二、获取查询数量","link":"#二、获取查询数量","children":[]},{"level":3,"title":"三、设置记录数量","slug":"三、设置记录数量","link":"#三、设置记录数量","children":[]},{"level":3,"title":"四、设置起始位置","slug":"四、设置起始位置","link":"#四、设置起始位置","children":[]},{"level":3,"title":"五、对结果排序","slug":"五、对结果排序","link":"#五、对结果排序","children":[]},{"level":3,"title":"六、指定返回字段","slug":"六、指定返回字段","link":"#六、指定返回字段","children":[]},{"level":3,"title":"七、查询指令","slug":"七、查询指令","link":"#七、查询指令","children":[]},{"level":3,"title":"八、正则表达式查询","slug":"八、正则表达式查询","link":"#八、正则表达式查询","children":[]}]},{"level":2,"title":"数据库操作符","slug":"数据库操作符","link":"#数据库操作符","children":[{"level":3,"title":"一、查询·逻辑操作符","slug":"一、查询·逻辑操作符","link":"#一、查询·逻辑操作符","children":[]},{"level":3,"title":"二、查询·比较操作符","slug":"二、查询·比较操作符","link":"#二、查询·比较操作符","children":[]},{"level":3,"title":"三、查询·字段操作符","slug":"三、查询·字段操作符","link":"#三、查询·字段操作符","children":[]},{"level":3,"title":"四、查询·数组操作符","slug":"四、查询·数组操作符","link":"#四、查询·数组操作符","children":[]},{"level":3,"title":"五、查询·地理位置操作符","slug":"五、查询·地理位置操作符","link":"#五、查询·地理位置操作符","children":[]},{"level":3,"title":"六、查询·表达式操作符","slug":"六、查询·表达式操作符","link":"#六、查询·表达式操作符","children":[]},{"level":3,"title":"七、更新·字段操作符","slug":"七、更新·字段操作符","link":"#七、更新·字段操作符","children":[]},{"level":3,"title":"八、更新·数组操作符","slug":"八、更新·数组操作符","link":"#八、更新·数组操作符","children":[]}]}],"git":{},"filePathRelative":"markdown/前端/UniCloud/README.md"}')}}]);