"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[4812],{6208:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>i});var t=a(641);const p=(0,t.Lk)("h2",{id:"统计重复个数",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#统计重复个数"},[(0,t.Lk)("span",null,[(0,t.Lk)("strong",null,"统计重复个数")])])],-1),e={href:"https://leetcode.cn/problems/count-the-repetitions/",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Fv)('<h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码：</span></a></h3><p>双指针 循环点</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">getMaxRepetitions</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s1<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> counts1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//s1计数</span>\n  <span class="token keyword">let</span> counts2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//s2计数</span>\n  <span class="token keyword">let</span> s2p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//s2指针</span>\n  <span class="token comment">//当s1的循环数量没有超过s1总个数，就可以继续读取s1</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>counts1 <span class="token operator">&lt;</span> n1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//遍历s1中每一个字符</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果相等指针后移 匹配后面的字符</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s2<span class="token punctuation">[</span>s2p<span class="token punctuation">]</span><span class="token punctuation">)</span> s2p<span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token comment">// s2最后一个，全都匹配到了 重置指针，s2计数加一</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>s2p <span class="token operator">===</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        counts2<span class="token operator">++</span><span class="token punctuation">;</span>\n        s2p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    counts1<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 循环下一个s1</span>\n    <span class="token comment">//如果s2的指针指到了开头，说明正好找到了循环点</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>s2p <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> times <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n1 <span class="token operator">/</span> counts1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 之前循环了多少次 还有多少次循环点</span>\n      counts1 <span class="token operator">*=</span> times<span class="token punctuation">;</span> <span class="token comment">// 循环点 * 子序列次数</span>\n      counts2 <span class="token operator">*=</span> times<span class="token punctuation">;</span>\n      <span class="token comment">//这里计数乘循环的次数，继续循环 因为counts1还可能是小于n1的，循环节点不能整除</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//返回结果。</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>counts2 <span class="token operator">/</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),c={},l=(0,a(6262).A)(c,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[p,(0,t.Lk)("p",null,[(0,t.Lk)("a",e,[(0,t.eW)("题目链接"),(0,t.bF)(a)])]),o])}]]),i=JSON.parse('{"path":"/algorithm/middle/%E7%BB%9F%E8%AE%A1%E9%87%8D%E5%A4%8D%E4%B8%AA%E6%95%B0.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"统计重复个数","slug":"统计重复个数","link":"#统计重复个数","children":[{"level":3,"title":"代码：","slug":"代码","link":"#代码","children":[]}]}],"git":{"updatedTime":1724144871000,"contributors":[{"name":"“liwx”","email":"“1258598654qq.com”","commits":1}]},"filePathRelative":"algorithm/middle/统计重复个数.md"}')}}]);