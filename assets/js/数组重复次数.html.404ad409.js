"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[1979],{1313:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var p=a(641);const t=[(0,p.Fv)('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span><strong>描述：</strong></span></a></h2><p>给定一个字符串数组, 每一个元素代表一个 IP 地址，找到出现频率最高的 IP。</p><p>注：给定数据只有一个频率最高的 IP</p><p><strong>样例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;192.168.1.1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;192.118.2.1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;192.168.1.1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> <span class="token string">&#39;192.168.1.1&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目分析：</strong></p><p>说了一堆，其实就是找出数组重复次数最多的元素</p><p><strong>思路：</strong></p><p>用对象来处理，将元素赋值到属性上，判断之前有没有这个属性。</p><blockquote><p><strong>数组去重</strong></p><p>虽然对象属性同样可以用来做数组去重，但是会将 number,NaN,undefined,null，变为字符串形式，因为对象的属性名就是一个字符串</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> ipLines: ip  address\n * <span class="token keyword">@return</span>: return highestFrequency ip address\n */</span>\n<span class="token keyword">const</span> <span class="token function-variable function">highestFrequency</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ipLines</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> <span class="token punctuation">[</span>obj<span class="token punctuation">,</span> max<span class="token punctuation">,</span> name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  ipLines<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 已经有值了 就把值+1</span>\n      obj<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 判断重复次数有没有超过当前最高的</span>\n        max <span class="token operator">=</span> obj<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 重复次数</span>\n        name <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 当前元素</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 没有值 就初始化一个值</span>\n      obj<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',11)],e={},o=(0,a(6262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,t)}]]),c=JSON.parse('{"path":"/algorithm/simple/%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"描述：","slug":"描述","link":"#描述","children":[]}],"git":{"updatedTime":1724145556000,"contributors":[{"name":"“liwx”","email":"“1258598654qq.com”","commits":1}]},"filePathRelative":"algorithm/simple/数组重复次数.md"}')}}]);