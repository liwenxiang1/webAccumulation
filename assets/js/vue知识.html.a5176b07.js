"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[4369],{8814:(e,i,n)=>{n.r(i),n.d(i,{comp:()=>m,data:()=>b});var t=n(641);const a=(0,t.Fv)('<h1 id="vue知识" tabindex="-1"><a class="header-anchor" href="#vue知识"><span>vue知识</span></a></h1><h2 id="一、vue常见的style和class动态绑定问题" tabindex="-1"><a class="header-anchor" href="#一、vue常见的style和class动态绑定问题"><span>一、vue常见的<code>style</code>和<code>class</code>动态绑定问题</span></a></h2><h3 id="_1-style-动态绑定" tabindex="-1"><a class="header-anchor" href="#_1-style-动态绑定"><span>1.style 动态绑定</span></a></h3><blockquote><p>三元判断</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:style=&quot;{ color: monthData.grow ? &#39;#EE4E4E&#39; : &#39;#38B289&#39; }&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>值引用</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:style=&quot;{ width: completeData.completionRateMonth }&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>多属性动态配置</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:style=&quot;{ width: item.width, color: index == selIndex ? &#39;#1989fa&#39; : &#39;#404144&#39; }&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>多条件判断</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:style=&quot;{ color: canGetYzm &amp;&amp; canGetYzmClick ? &#39;#4575ee&#39; : &#39;#999999&#39; }&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>使用返回的返回值</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:style=&quot;{ background: computeLineColor(dataIdx, tableList.length) }&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>值拼接</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:style=&quot;{ width: yearData.ratio + &#39;%&#39; }&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>多值拼接</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:style=&quot;{ top: &#39;calc(75px + &#39; + marginTop + &#39;px)&#39; }&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-class-动态绑定" tabindex="-1"><a class="header-anchor" href="#_2-class-动态绑定"><span>2.class 动态绑定</span></a></h3><blockquote><p>条件判断</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:class=&quot;{ &#39;tag-divider&#39;: index != 0 }&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>三元判断</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:class=&quot;activeTab1 == item.name ? &#39;active-tab&#39; : &#39;tab-link&#39;&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>多类名绑定</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:class=&quot;[{ &#39;tab-below&#39;: tabBelow }, { &#39;tab-below-route_detail&#39;: showRouteDetail }]&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、组件中使用-v-model-绑定数据" tabindex="-1"><a class="header-anchor" href="#二、组件中使用-v-model-绑定数据"><span>二、组件中使用 <code>v-model</code> 绑定数据</span></a></h2><blockquote><p>在组件中使用<code>computed</code>将 <code>v-model</code> 传入的 <em><strong>value</strong></em> 和传出的 <em><strong>input</strong></em> 事件进行转换，方便使用。</p></blockquote><ul><li><p>1.在 <code>index</code> 页面中代码：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;create-dialog v-model=&quot;showDialog&quot;&gt;&lt;/create-dialog&gt;\nimport createDialog from &quot;./component/createDialog&quot;\nexport default { \n\tdata() { return {showDialog: false} } \n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>2.在 <code>createDialog</code> 组件中代码： <em>可以直接使用 <strong>showDialog</strong> 属性</em></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>export default {\n  props: {\n    value: {type: Boolean,default: false, }\n  },\n  computed: {\n    showDialog: {\n      get() {\n        return this.value;\n      },\n      set(val) {\n        this.$emit(&quot;input&quot;, val);\n      }\n    }\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>第二种方法：使用emit方法的【update:title】参数将组件值修改同步到使用的控件上</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>app.component(&#39;my-component&#39;, {\n  props: {\n    title: String\n  },\n  emits: [&#39;update:title&#39;],\n  template: `\n    &lt;input\n      type=&quot;text&quot;\n      :value=&quot;title&quot;\n      @input=&quot;$emit(&#39;update:title&#39;, $event.target.value)&quot;&gt;\n  `\n})\n\n&lt;my-component v-model:title=&quot;bookTitle&quot;&gt;&lt;/my-component&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h2 id="二、store-vuex-使用" tabindex="-1"><a class="header-anchor" href="#二、store-vuex-使用"><span>二、store(vuex)使用</span></a></h2>',28),l={id:"_1-参考mpx框架代码-mpx-store官方文档-及-视频",tabindex:"-1"},s={class:"header-anchor",href:"#_1-参考mpx框架代码-mpx-store官方文档-及-视频"},d={href:"https://didi.github.io/mpx/store/#%E5%BC%80%E5%A7%8B",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Lk)("code",null,"mpx-store官方文档",-1),u={href:"https://www.imooc.com/video/20829",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Lk)("code",null,"视频",-1),c=(0,t.Fv)('<ul><li><p>1.<a href="code/mpx-demo/store/todo.js">store.js写法示例</a></p><details><summary>展开查看</summary><pre><code>import { createStore } from &#39;@mpxjs/core&#39;\nconst store = createStore({\n  state: {\n    count: 1\n  },\n  mutations: { //修改state里面的属性值\n    add(state, payload) {\n      state.count+=payload\n    }\n  },\n  actions:{ //1.第一个参数是 context 对象；可以写成{ commit, state ,dispatch }；2.可以执行异步方法\n    addAsync({commit},payload){\n      return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n          commit(&#39;add&#39;,payload);\n          resolve()\n        }, 1000)\n      })\n    },\n    actionB ({ dispatch, commit }) {\n      return dispatch(&#39;addAsync&#39;,2).then(() =&gt; {\n        commit(&#39;someOtherMutation&#39;)\n      })\n    }\n  },\n  getters: { //不修改state里面的属性值直接返回逻辑数据\n    isBiggerThan10:state=&gt;{\n      return state.count&gt;10; \n    }\n  },\n})\nexport default store</code></pre></details></li><li><p>2.<a href="code/mpx-demo/pages/todo.mpx">vue界面使用示例</a></p><details><summary>展开查看</summary><pre><code>import store from &#39;../../store/index&#39;\ncomputed:{\n  ...store.mapState({zCount:&#39;count&#39;}), //1.mapState辅助函数获取多个状态；全局可以直接使用 zCount 属性\n  ...store.mapGetters([&#39;isBiggerThan10&#39;]),\n  mCount(){ //2.原始写法：\n    return store.state.count;\n  }\n},\nmethods: {\n  ...store.mapMutations([&#39;add&#39;]),//1.全局可以直接使用 add 方法\n  ...store.mapActions([&#39;addAsync&#39;]),\n  addTen(){ //2.原始写法：\n    store.commit(&#39;add&#39;,10)\n    store.dispatch(&#39;addAsync&#39;,10)\n  },\n  addProcess(){\n    this.add(10)\n    this.addAsync(10).then(...)\n  }\n}</code></pre></details></li></ul><h4 id="_2-正常vue项目中使用" tabindex="-1"><a class="header-anchor" href="#_2-正常vue项目中使用"><span>2.正常vue项目中使用</span></a></h4><ul><li><p>1.store/modules/lesson下的代码：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>export default {\n  state: {curLessonTab: &#39;first&#39;},\n  mutations: {\n  \tsetLessonTab: (state, tab) =&gt; {\n      state.curLessonTab = tab\n    }\n  },\n  getters: { //不修改state里面的属性值直接返回逻辑数据\n  \tgetLessonTab(state) {\n      return state.curLessonTab\n    }\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>2.在页面中使用：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>this.$store.commit(&#39;lesson/setLessonTab&#39;, this.activeName)\nthis.$store.state[&#39;lesson/curLessonTab&#39;] //在lf-system-web项目中使用\nconst token = this.$store.state.user.token //在org-app项目中使用\nthis.index=this.$store.state.ydfa.tabIndex //在xcyz-app项目中使用\nconst lessonTab = this.$store.getters[&#39;lesson/getLessonTab&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="三、vue-prototype全局变量使用-在-main-js-中" tabindex="-1"><a class="header-anchor" href="#三、vue-prototype全局变量使用-在-main-js-中"><span>三、Vue.prototype全局变量使用 在 <a href="code/admin_unicloud/main.js"><code>main.js</code></a> 中</span></a></h2><blockquote><p>1.正常可以直接在main.js中定义Vue.prototype.xxx全局变量</p><p>2.为了代码分离可以使用Vue.use(xxx)将变量定义放到其他js中。 <em>这里的xxx是使用<code>别处导出的default对象</code>，<code>对象</code>需要有<code>install(Vue)</code>方法</em></p></blockquote><h4 id="_1-配置一个变量" tabindex="-1"><a class="header-anchor" href="#_1-配置一个变量"><span>1.配置一个变量</span></a></h4><ul><li><p>1.mian.js代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import globalVariable from &#39;./utils/globalVariable&#39;\nVue.prototype.globalVariable = globalVariable\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>2.globalVariable.js代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let isMathjaxConfig = false\nconst initMathjaxConfig = () =&gt; {}\nconst MathQueue = function(elementId) {}\nexport default {\n  isMathjaxConfig,\n  initMathjaxConfig,\n  MathQueue\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>可以将上面的代码转成Vue.use的格式：</p></blockquote><ul><li><p>1.修改main.js代码： <code>Vue.use(globalVariable)</code></p></li><li><p>2.修改globalVariable.js代码如下</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>export default{\n\tinstall(Vue) {\n\t\tVue.prototype.$globalVariable={isMathjaxConfig,  initMathjaxConfig,  MathQueue}\n\t}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-配置多个变量" tabindex="-1"><a class="header-anchor" href="#_2-配置多个变量"><span>2.配置多个变量</span></a></h4><ul><li><p>1.main.js代码：</p><blockquote><p><code>Vue.use(plugin)</code></p></blockquote></li><li><p>2.plugin.js代码：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import {\n initUtil\n} from &#39;./util.js&#39;\nexport default {\n install(Vue) {\n     initUtil(Vue)\n     initPermission(Vue)\n     initInterceptor()\n }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>3.util.js代码：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function formatDate(date, format = &#39;yyyy/MM/dd hh:mm:ss&#39;){\n return ...\n}\nexport function initUtil(Vue) {\n Vue.prototype.$formatDate = formatDate\n Vue.prototype.$formatBytes = formatBytes\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="四、vue-directive快捷指令的使用" tabindex="-1"><a class="header-anchor" href="#四、vue-directive快捷指令的使用"><span>四、Vue.directive快捷指令的使用</span></a></h2><blockquote><p>同上面的<code>prototype</code>定义一样，可以直接在<code>main.js</code>中定义，也可以使用Vue.use(xxx)在别处定义后引入。</p><p>还可以单独挂载到Vue页面中使用时再挂载</p></blockquote><h4 id="_1-全局使用-防止按钮连续点击" tabindex="-1"><a class="header-anchor" href="#_1-全局使用-防止按钮连续点击"><span>1.全局使用（防止按钮连续点击）</span></a></h4><ul><li>main.js中代码：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import throttle from &quot;@/utils/throttle&quot;;\nVue.use(throttle)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>throttle.js中代码：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>export default {\n  install(Vue) {\n    // 防止重复点击\n    Vue.directive(&#39;throttle&#39;, {\n      inserted(el, binding) {\n        console.log(&quot;binding-7&quot;, binding)\n        el.addEventListener(&#39;click&#39;, () =&gt; {\n          if (!el.disabled) {\n            el.disabled = true\n            setTimeout(() =&gt; {\n              el.disabled = false\n            }, binding.value || 1000)\n          }\n        })\n      }\n    })\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-挂载到页面中-使用时再挂载" tabindex="-1"><a class="header-anchor" href="#_2-挂载到页面中-使用时再挂载"><span>2.挂载到页面中，使用时再挂载</span></a></h4><ul><li>index.vue页面中代码：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import waves from &#39;@/directive/waves/index.js&#39; // 水波纹指令\nexport default {\n  directives: {\n    waves\n  }\n  ...\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>waves/index.js代码：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import waves from &#39;./waves&#39;\nconst install = function(Vue) {\n  Vue.directive(&#39;waves&#39;, waves)\n}\nif (window.Vue) {\n  window.waves = waves\n  Vue.use(install); // eslint-disable-line\n}\nwaves.install = install\nexport default waves\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>waves/waves.js代码：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>export default {\n  bind(el, binding) {\n    el.addEventListener(&#39;click&#39;, handleClick(el, binding), false)\n  },\n  update(el, binding) {\n    el.removeEventListener(&#39;click&#39;, el[context].removeHandle, false)\n    el.addEventListener(&#39;click&#39;, handleClick(el, binding), false)\n  },\n  unbind(el) {\n    el.removeEventListener(&#39;click&#39;, el[context].removeHandle, false)\n    el[context] = null\n    delete el[context]\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、mixin使用" tabindex="-1"><a class="header-anchor" href="#五、mixin使用"><span>五、mixin使用</span></a></h2><h2 id="六、生命周期-beforerouteleave使用" tabindex="-1"><a class="header-anchor" href="#六、生命周期-beforerouteleave使用"><span>六、生命周期：<code>beforeRouteLeave</code>使用</span></a></h2><p><code>beforeRouteEnter</code>里面执行this的方法好像会失败。。。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>beforeRouteLeave(to, from, next) {\n  if (to.path == &quot;/searchdw&quot; || to.path == &quot;/bmjcyj&quot;) {\n    this.$store.commit(&quot;jgjyfazjinfo&quot;, this.jgjyfazj);\n    next();\n  } else {\n    this.$store.commit(&quot;jgjyfazjinfo&quot;, &quot;&quot;);\n    this.$store.commit(&quot;setsjdwmc&quot;, &quot;&quot;);\n    this.$store.commit(&quot;setsgdwmc&quot;, &quot;&quot;);\n    this.$store.commit(&quot;setsydwmc&quot;, &quot;&quot;);\n    next();\n  }\n},\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',29),v={},m=(0,n(6262).A)(v,[["render",function(e,i){const n=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[a,(0,t.Lk)("h4",l,[(0,t.Lk)("a",s,[(0,t.Lk)("span",null,[(0,t.eW)("1.参考mpx框架代码 "),(0,t.Lk)("a",d,[r,(0,t.eW)(),(0,t.bF)(n)]),(0,t.eW)(" 及 "),(0,t.Lk)("a",u,[o,(0,t.bF)(n)])])])]),c])}]]),b=JSON.parse('{"path":"/markdown/%E5%89%8D%E7%AB%AF/vue/vue%E7%9F%A5%E8%AF%86.html","title":"vue知识","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、vue常见的style和class动态绑定问题","slug":"一、vue常见的style和class动态绑定问题","link":"#一、vue常见的style和class动态绑定问题","children":[{"level":3,"title":"1.style 动态绑定","slug":"_1-style-动态绑定","link":"#_1-style-动态绑定","children":[]},{"level":3,"title":"2.class 动态绑定","slug":"_2-class-动态绑定","link":"#_2-class-动态绑定","children":[]}]},{"level":2,"title":"二、组件中使用 v-model 绑定数据","slug":"二、组件中使用-v-model-绑定数据","link":"#二、组件中使用-v-model-绑定数据","children":[]},{"level":2,"title":"二、store(vuex)使用","slug":"二、store-vuex-使用","link":"#二、store-vuex-使用","children":[]},{"level":2,"title":"三、Vue.prototype全局变量使用 在 main.js 中","slug":"三、vue-prototype全局变量使用-在-main-js-中","link":"#三、vue-prototype全局变量使用-在-main-js-中","children":[]},{"level":2,"title":"四、Vue.directive快捷指令的使用","slug":"四、vue-directive快捷指令的使用","link":"#四、vue-directive快捷指令的使用","children":[]},{"level":2,"title":"五、mixin使用","slug":"五、mixin使用","link":"#五、mixin使用","children":[]},{"level":2,"title":"六、生命周期：beforeRouteLeave使用","slug":"六、生命周期-beforerouteleave使用","link":"#六、生命周期-beforerouteleave使用","children":[]}],"git":{},"filePathRelative":"markdown/前端/vue/vue知识.md"}')}}]);