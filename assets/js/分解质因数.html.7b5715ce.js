"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[9795],{2044:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>r});var e=a(641);const t=(0,e.Lk)("h2",{id:"分解质因数",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#分解质因数"},[(0,e.Lk)("span",null,[(0,e.Lk)("strong",null,"分解质因数")])])],-1),p=(0,e.Lk)("h3",{id:"质因数的定义",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#质因数的定义"},[(0,e.Lk)("span",null,[(0,e.Lk)("strong",null,"质因数的定义：")])])],-1),l=(0,e.Lk)("p",null,"能整除给定正整数的质数。",-1),o={href:"https://baike.baidu.com/item/%E8%B4%A8%E5%9B%A0%E6%95%B0#reference-%5B1%5D-341369-wrap",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Fv)('<h3 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span><strong>描述：</strong></span></a></h3><ol><li>将一个整数分解为若干质因数之乘积</li><li>你需要从小到大排列质因子</li></ol><h3 id="样例" tabindex="-1"><a class="header-anchor" href="#样例"><span><strong>样例：</strong></span></a></h3><ul><li>给出 10, 返回 [2, 5]</li><li>给出 660, 返回 [2, 2, 3, 5, 11]</li></ul><h3 id="题目分析" tabindex="-1"><a class="header-anchor" href="#题目分析"><span><strong>题目分析：</strong></span></a></h3><p>从小到大排列质因子，需要将同一个质因子整除干净。</p><p>比如：20 可以被 2 整除两次。</p><p>提示：需要两层循环。</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span><strong>代码：</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 分解质因数</span>\n<span class="token keyword">const</span> <span class="token function-variable function">primeFactorization</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// 不需要判定i是否为质数，如果i不为质数，且能整除num时，num早被i的因数所除。故能整除num的i必是质数。</span>\n  <span class="token comment">// i * i &gt; num 退出循环 num一开始会在第二层循环被i整除成比较小的数字</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 直到有余数退出循环</span>\n      num <span class="token operator">=</span> num <span class="token operator">/</span> i<span class="token punctuation">;</span> <span class="token comment">// 改变num</span>\n      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有余数 能整除 这一步会找出所有质因数 不会出现4的那种情况</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// num到最后也是质因数</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',10),c={},u=(0,a(6262).A)(c,[["render",function(n,s){const a=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[t,p,l,(0,e.Lk)("p",null,[(0,e.eW)("百度百科："),(0,e.Lk)("a",o,[(0,e.eW)("质因数"),(0,e.bF)(a)])]),i])}]]),r=JSON.parse('{"path":"/algorithm/simple/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"分解质因数","slug":"分解质因数","link":"#分解质因数","children":[{"level":3,"title":"质因数的定义：","slug":"质因数的定义","link":"#质因数的定义","children":[]},{"level":3,"title":"描述：","slug":"描述","link":"#描述","children":[]},{"level":3,"title":"样例：","slug":"样例","link":"#样例","children":[]},{"level":3,"title":"题目分析：","slug":"题目分析","link":"#题目分析","children":[]},{"level":3,"title":"代码：","slug":"代码","link":"#代码","children":[]}]}],"git":{"updatedTime":1724145556000,"contributors":[{"name":"“liwx”","email":"“1258598654qq.com”","commits":1}]},"filePathRelative":"algorithm/simple/分解质因数.md"}')}}]);