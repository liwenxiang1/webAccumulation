"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[6909],{7862:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var t=a(641);const p=[(0,t.Fv)('<h2 id="合并排序数组" tabindex="-1"><a class="header-anchor" href="#合并排序数组"><span><strong>合并排序数组</strong></span></a></h2><h3 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span><strong>描述：</strong></span></a></h3><p>合并两个排序的整数数组 <code>A</code> 和 <code>B</code> 变成一个新的排序数组。</p><h3 id="样例" tabindex="-1"><a class="header-anchor" href="#样例"><span><strong>样例：</strong></span></a></h3><p>给出 <code>A=[1,2,3,4]，B=[2,4,5,6]</code>，返回 <code>[1,2,2,3,4,4,5,6]</code></p><h3 id="题目分析" tabindex="-1"><a class="header-anchor" href="#题目分析"><span><strong>题目分析：</strong></span></a></h3><p>注意 <code>A</code> 和 <code>B</code> 本来就是排序好的数组，最简单的就是用 <code>sort</code> 排序了。</p><h3 id="sort-排序" tabindex="-1"><a class="header-anchor" href="#sort-排序"><span><strong><code>sort</code> 排序</strong></span></a></h3><ol><li>把两个数组合并成一个数组</li><li>用 sort 升序进行排序。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mergeSortedArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合并数组</span>\n  <span class="token keyword">return</span> newArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment">// sort 排序</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="先对比完一个数组" tabindex="-1"><a class="header-anchor" href="#先对比完一个数组"><span><strong>先对比完一个数组：</strong></span></a></h3><ol><li><p>初始两个变量分别对应一个数组，进入循环</p></li><li><p><code>i</code> 和 <code>j</code> 不会同时递增，只在对应数组元素打败另一数组元素时才会递增，只要打败一个即可，因为两个数组一开始就是排序好的</p></li><li><p><code>i</code> 和 <code>j</code> 必须有一个超过对应数组长度(这样至少有一个数组的元素被逐一比较过)</p></li><li><p>如果一个数组那边超过长度，会退出循环，但是可能由一方的长度还有剩余（比如一个元素打败另一数组的所有元素），所以我们需要将长度有剩余的数组剩下的元素全都 <code>push</code> 到新数组中(因为一开始就排序好的，后面出场的只会更强)</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mergeSortedArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">A</span><span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token constant">B</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// i 或者 j 必须有一个超过对应数组长度 才退出循环 所以至少有一个数组的元素被逐一比较</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token constant">B</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 下面两种写法是一样的</span>\n      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      i<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里会先把 j 赋值给 B[j]， 然后再 j++</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 上面至少有一个数组已经比较了每个元素 如果还有一方长度有剩余 直接push进来就可以(AB一开始就是排序好的数组)</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token constant">A</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token constant">B</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',13)],e={},o=(0,a(6262).A)(e,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,p)}]]),c=JSON.parse('{"path":"/algorithm/simple/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"合并排序数组","slug":"合并排序数组","link":"#合并排序数组","children":[{"level":3,"title":"描述：","slug":"描述","link":"#描述","children":[]},{"level":3,"title":"样例：","slug":"样例","link":"#样例","children":[]},{"level":3,"title":"题目分析：","slug":"题目分析","link":"#题目分析","children":[]},{"level":3,"title":"sort 排序","slug":"sort-排序","link":"#sort-排序","children":[]},{"level":3,"title":"先对比完一个数组：","slug":"先对比完一个数组","link":"#先对比完一个数组","children":[]}]}],"git":{},"filePathRelative":"algorithm/simple/合并排序数组.md"}')}}]);