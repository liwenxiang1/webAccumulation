"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[7780],{869:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var t=a(641);const p=[(0,t.Fv)('<h2 id="判断字符串的循环移动" tabindex="-1"><a class="header-anchor" href="#判断字符串的循环移动"><span><strong>判断字符串的循环移动</strong></span></a></h2><p><strong>描述：</strong></p><p>可以检验某个单词是否为另一个单词的子字符串。给定 <code>s1</code> 和 <code>s2</code>，请设计一种方法来检验 <code>s2</code> 是否为 <code>s1</code> 的循环移动后的字符串。</p><h3 id="样例" tabindex="-1"><a class="header-anchor" href="#样例"><span><strong>样例：</strong></span></a></h3><p><code>s1 = waterbottle</code>; <code>s2 = erbottlewat</code>; 返回<code>true</code>;</p><p><code>s1 = apple</code>; <code>s2 = ppale</code>; 返回<code>false</code>;</p><h3 id="思路分析" tabindex="-1"><a class="header-anchor" href="#思路分析"><span><strong>思路分析：</strong></span></a></h3><p>将其中一个字符串转成数组来操作，然后再转成字符，回头来比较字符串。</p><h3 id="代码模板" tabindex="-1"><a class="header-anchor" href="#代码模板"><span><strong>代码模板：</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> s1: the first string\n * <span class="token keyword">@param</span> s2: the socond string\n * <span class="token keyword">@return</span>: true if s2 is a rotation of s1 or false\n */</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isRotation</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s1<span class="token punctuation">,</span> s2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span><strong>代码：</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 将最后的值拿出来 再放到第一位上去</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isRotation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">===</span> t<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 转数组</span>\n      <span class="token keyword">let</span> pop <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拿最后一个元素</span>\n      t<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到第一个元素</span>\n      t <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转字符</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> s<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 比较</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 字符串长度相等 并且有值</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;输出：&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">isRotation</span><span class="token punctuation">(</span><span class="token string">&#39;waterbottle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;erbottlewat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">isRotation</span><span class="token punctuation">(</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ppale&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',12)],e={},o=(0,a(6262).A)(e,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,p)}]]),c=JSON.parse('{"path":"/algorithm/simple/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%A7%BB%E5%8A%A8.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"判断字符串的循环移动","slug":"判断字符串的循环移动","link":"#判断字符串的循环移动","children":[{"level":3,"title":"样例：","slug":"样例","link":"#样例","children":[]},{"level":3,"title":"思路分析：","slug":"思路分析","link":"#思路分析","children":[]},{"level":3,"title":"代码模板：","slug":"代码模板","link":"#代码模板","children":[]},{"level":3,"title":"代码：","slug":"代码","link":"#代码","children":[]}]}],"git":{"updatedTime":1724145556000,"contributors":[{"name":"“liwx”","email":"“1258598654qq.com”","commits":1}]},"filePathRelative":"algorithm/simple/判断字符串的循环移动.md"}')}}]);