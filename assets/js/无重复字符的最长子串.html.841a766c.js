"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[9954],{1855:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var e=a(641);const p=[(0,e.Fv)('<h2 id="无重复字符的最长子串" tabindex="-1"><a class="header-anchor" href="#无重复字符的最长子串"><span><strong>无重复字符的最长子串</strong></span></a></h2><h3 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述：</span></a></h3><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><h3 id="样例" tabindex="-1"><a class="header-anchor" href="#样例"><span>样例：</span></a></h3><p>输入: <code>abcabcbb</code> 输出: `3</p><p>解释: 因为无重复字符的最长子串是 <code>abc</code>，所以其长度为 <code>3</code>。</p><p>输入: <code>bbbbb</code> 输出: <code>1</code></p><p>解释: 因为无重复字符的最长子串是 <code>b</code>，所以其长度为 <code>1</code>。</p><p>输入: <code>&quot;pwwkew&quot;</code> 输出: <code>3</code></p><p>解释: 因为无重复字符的最长子串是 <code>wke</code>，所以其长度为 <code>3</code>。</p><p>输入: <code>dvdf</code> 输出: <code>3</code></p><p>解释: 因为无重复字符的最长子串是 <code>vdf</code>，所以其长度为 <code>3</code>。</p><p>输入: <code>asjrgapa</code> 输出: 6</p><p>解释: 因为无重复字符的最长子串是 <code>sjrgap</code>，所以其长度为 <code>6</code>。</p><p>输入: <code>aabaab!bb</code> 输出: <code>3</code></p><p>解释: 因为无重复字符的最长子串是 <code>ab!</code>，所以其长度为 <code>3</code>。</p><p>输入: <code>abcb</code> 输出: <code>3</code></p><p>解释: 因为无重复字符的最长子串是 <code>abc</code>，所以其长度为 <code>3</code>。</p><p>输入: <code>asljlj</code> 输出: <code>4</code></p><p>解释: 因为无重复字符的最长子串是 <code>aslj</code>，所以其长度为 <code>4</code>。</p><p>输入: <code>qwnfenpglqdq</code> 输出: <code>8</code></p><p>解释: 因为无重复字符的最长子串是 <code>fenpglqd</code>，所以其长度为 <code>8</code>。</p><h3 id="思路分析" tabindex="-1"><a class="header-anchor" href="#思路分析"><span>思路分析：</span></a></h3><p>关键在于在出现重复字符时，如何更新不重复字符的 <code>index</code></p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码：</span></a></h3><p>用对象储存字符的位置, 出现重复字符时更新不重复字符的 <code>index</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 用于储存字符出现的位置</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 最大值</span>\n  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 不重复字符的 index</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当前值是否在对象中存储过</span>\n    <span class="token keyword">const</span> value <span class="token operator">=</span> obj<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 更新上一次重复值的 index</span>\n      <span class="token comment">// value + 1 跳过之前重复的字符</span>\n      <span class="token comment">// j: 之前不重复的 index 重复字符 需要全部跳过</span>\n      j <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 每个字符都计算一下最长不重复值 保存最大值</span>\n    <span class="token comment">// 不重复最长长度 = 当前 index - 上一次重复值的 index + index 从 0 开始 长度从 1 开始</span>\n    res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 存/更新 字符串 index</span>\n    obj<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从左到右，一个字符一个字符搜索，看是否重复。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 不重复字符的 index</span>\n    res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 更新无重复字符的长度</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 查找：不重复字符-当前 index 之间 有没有出现当前字符</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 更新无重复字符的长度：当前 index-不重复字符的 index + 长度从 1 开始算</span>\n      res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 更新 i = 不重复字符的 index</span>\n      <span class="token comment">// 不重复字符的 index = 原不重复的字符 index + i-j 中出现重复字符的 index + 跳过该重复字符</span>\n      i <span class="token operator">=</span> i <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',29)],t={},o=(0,a(6262).A)(t,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,p)}]]),c=JSON.parse('{"path":"/algorithm/middle/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"无重复字符的最长子串","slug":"无重复字符的最长子串","link":"#无重复字符的最长子串","children":[{"level":3,"title":"描述：","slug":"描述","link":"#描述","children":[]},{"level":3,"title":"样例：","slug":"样例","link":"#样例","children":[]},{"level":3,"title":"思路分析：","slug":"思路分析","link":"#思路分析","children":[]},{"level":3,"title":"代码：","slug":"代码","link":"#代码","children":[]}]}],"git":{},"filePathRelative":"algorithm/middle/无重复字符的最长子串.md"}')}}]);