"use strict";(self.webpackChunkliwx_docs=self.webpackChunkliwx_docs||[]).push([[5646],{2749:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>r,data:()=>k});var e=s(641);const t=(0,e.Lk)("h1",{id:"instanceof-实现原理",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#instanceof-实现原理"},[(0,e.Lk)("span",null,"instanceof 实现原理")])],-1),l=(0,e.Lk)("h2",{id:"思路",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#思路"},[(0,e.Lk)("span",null,"思路")])],-1),p=(0,e.Lk)("p",null,"右边变量存在于左边变量的原型链上",-1),o=(0,e.Lk)("p",null,"关于原型链不太懂的同学可以看一下，我的这篇文章：",-1),c={href:"/accumulation/prototype.html",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Fv)('<h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码：</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myInstanceOf</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> leftValue <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> rightValue <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> rightValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    leftValue <span class="token operator">=</span> leftValue<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),u={},r=(0,s(6262).A)(u,[["render",function(n,a){const s=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[t,l,p,o,(0,e.Lk)("p",null,[(0,e.Lk)("a",c,[(0,e.eW)("原型和原型链"),(0,e.bF)(s)])]),i])}]]),k=JSON.parse('{"path":"/utils/instanceof.html","title":"instanceof 实现原理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"代码：","slug":"代码","link":"#代码","children":[]}],"git":{"updatedTime":1724145943000,"contributors":[{"name":"“liwx”","email":"“1258598654qq.com”","commits":1}]},"filePathRelative":"utils/instanceof.md"}')}}]);